#
# documentation for Maven project.xml elements.
# Convention is to disambiguate elements where necessary by preceding with the
# parent element name.
#
# Note that all top-level project elements are prefixed with "project_" for
# clarity.
#

maven_project_doc := << EOF
The <project> element specifies various attributes about a project. This
is the root element of the project descriptor.
EOF

maven_project_extend_doc := << EOF
The location of the parent project, if one exists. Values from the
parent project will be the default for this project if they are left
unspecified. The path may be absolute, or relative to the current
project.xml file. <extend>${basedir}/../project.xml</extend>
EOF

maven_project_pomVersion_doc := << EOF
The current version of the Maven project descriptor. This version number
enables Maven to automatically update an out-of-date project descriptor
when a new version is available. This version number should not be
changed after the descriptor has been created. Maven will update it
automatically.
EOF

maven_project_id_doc := << EOF
The short name of the project. This value is used when naming jars and
distribution files.
EOF

maven_project_groupId_doc := << EOF
The short name of the project group. This value is used to group all
jars for a project in one directory. For more info look at the user
guide.
EOF

maven_project_artifactId_doc := << EOF
The short name of the project. This value is used in conjunction with
groupId when naming jars and distribution files.
EOF

maven_project_name_doc := << EOF
The full name of the project. This value is used when generating JavaDoc titles.
EOF

maven_project_currentVersion_doc := << EOF
The current version of the project. This value is used when naming jars and distribution files.
EOF

maven_project_shortDescription_doc := << EOF
A short description of the project. The short description should be limited to a single line.
EOF

maven_project_description_doc := << EOF
Optional. A detailed description of the project. This description is
used as the default to generate the Mailing Lists of the project's web
site, and is shown when maven usage is called on the project. While
this element can be specified as CDATA to enable the use of HTML tags
within the description, you are encouraged to provide an alternative
home page using xdocs/index.xml if this is required.
EOF

maven_project_url_doc := << EOF
The URL to the project's homepage.
EOF

maven_project_logo_doc := << EOF
The URL to the project's logo image. This can be an URL relative to the
base directory of the generated web site, (e.g.,
/images/project-logo.png) or an absolute URL (e.g.,
http://my.corp/project-logo.png). This is used when generating the
project documentation.
EOF

maven_project_issueTrackingUrl_doc := << EOF
Optional. The URL to the project's issue tracking system.
EOF

maven_project_inceptionYear_doc := << EOF
The year of the project's inception specified with 4 digits. This value
is used when generating JavaDoc copyright notices.
EOF

maven_project_gumpRepositoryId_doc := << EOF
Optional. This is the Id of the Gump repository that this project is 
part of (assuming it participates in the Gump integration effort).
EOF

maven_project_siteAddress_doc := << EOF
Optional. The hostname of the web server that hosts the project's web 
site. This is used when the web site is deployed.
EOF

maven_project_siteDirectory_doc := << EOF
Optional. The directory on the web server where the public web site for
this project resides. This is used when the web site is deployed.
EOF

maven_project_distributionSite_doc := << EOF
Optional. The server where the final distributions will be
published. This is used when the distributions are deployed.
If this isn't defined, the central repository is used instead as 
determined by maven.repo.central and maven.repo.central.directory
EOF

maven_project_distributionDirectory_doc := << EOF
Optional. The directory on the web server where the final distributions
will be published. This is used when the distributions are deployed.
EOF

maven_project_mailingLists_doc := << EOF
Contains information about a project's mailing lists. This is used to
generate the front page of the site's web site.
EOF

maven_project_developers_doc := << EOF
Describes the committers to a project. This is used to generate the
Project Team page of the project's web site.
EOF

maven_project_contributors_doc := << EOF
Describes the contributors to a project. This is used to generate the
Project Team page of the project's web site.
EOF

maven_project_licenses_doc := << EOF
This element describes all of the licenses for this project. Each
license is described by a license element, which is then described by
additional elements (described below). The auto-generated site
documentation references this information. Projects should only list the
license(s) that applies to the project and not the licenses that apply
to dependencies.
EOF

maven_project_versions_doc := << EOF
Optional. Contains information on previous versions of the project.
This information is used when invoking the maven:dist target.
EOF

maven_project_branches_doc := << EOF
Optional. Contains information on branches of the project. This
information is used when invoking the maven:dist target.
EOF

maven_project_packageGroups_doc := << EOF
Package groups required for complete javadocs.
EOF

maven_project_reports_doc := << EOF
The project reports element.
EOF

maven_project_properties_doc := << EOF
Project properties that will be used by various plugins
EOF

maven_project_package_doc := << EOF
The Java package name of the project. This value is used when generating JavaDoc.
EOF

maven_project_dependencies_doc := << EOF
This element describes all of the dependencies associated with a 
project. Each dependency is described by a dependency element, which is
then described by additional elements (described below).

These dependencies are used to construct a classpath for your project
during the build process.

Maven can automatically download these dependencies from a remote
repository.

The filename that Maven downloads from the repository is
artifactId-version.jar where artifactId corresponds to the artifactId
element and version corresponds to the version element.
When Maven goes looking for a dependency in the remote repository, it
uses the dependency element to construct the URL to download from. This
URL is defined as:
    ${repo}/${groupId}/${type}s/${artifactId}-${version}.${type}

Where
    repo       is the remote repository URL specified by ${maven.repo.remote}
    groupId    is taken from the dependency element
    type       is taken from the dependency element
    artifactId is taken from the dependency element
    version    is taken from the dependency element
EOF

#  <mailingLists>
#    <mailingList>
#      <name/>
#      <subscribe/>
#      <unsubscribe/>
#      <post/>
#      <archive/>
#      <otherArchives/>
#    </mailingList>
#  </mailingLists>
maven_mailingList_doc := << EOF
This element describes all of the mailing lists associated with a
project. Each mailing list is described by a mailingList element, which
is then described by additional elements (described below). The
auto-generated site documentation references this information.
EOF

maven_mailingList_name_doc := << EOF
The name of the mailing list.
EOF

maven_mailingList_subscribe_doc := << EOF
The email address or link that can be used to subscribe to the mailing
list. If this is an email address, a mailto: link will automatically
be created when the documentation is created.
EOF

maven_mailingList_unsubscribe_doc := << EOF
The email address or link that can be used to unsubscribe to the
mailing list. If this is an email address, a mailto: link will
automatically be created when the documentation is created.
EOF

maven_mailingList_post_doc := << EOF
The email address or link that can be used to post to the mailing list.
If this is an email address, a mailto: link will automatically be
created when the documentation is created.
EOF

maven_mailingList_archive_doc := << EOF
The link to a URL where you can browse the mailing list archive.
EOF

maven_mailingList_otherArchives_doc := << EOF
The link to other URLs where you can browse the list archive.
EOF

maven_developer_doc := << EOF
Information about one of the committers on this project. Derived from Contributor.
EOF

maven_developer_id_doc := The username of the developer:
maven_developer_name_doc := The full name of the contributor:
maven_developer_email_doc := The email address of the contributor:
maven_developer_url_doc := The URL for the homepage of the contributor:
maven_developer_organization_doc := The organization to which the contributor belongs:
maven_developer_organizationUrl_doc := The URL of the organization:

maven_developer_roles_doc := << EOF
The roles the contributor plays in the project. Each role is described
by a role element, the body of which is a role name.
EOF

maven_developer_timezone_doc := The timezone the contributor is in. This is a number in the range -11 to 12:
maven_developer_properties_doc := Properties about the contributor, such as an instant messenger handle:

maven_contributor_doc := << EOF
Description of a person who has contributed to the project, but who does
not have commit privileges. Usually, these contributions come in the
form of patches submitted.
EOF

maven_contributor_name_doc := << EOF
The full name of the contributor.
EOF

maven_contributor_email_doc := << EOF
The email address of the contributor.
EOF

maven_contributor_url_doc := << EOF
The URL for the homepage of the contributor.
EOF

maven_contributor_organization_doc := << EOF
The organization to which the contributor belongs.
EOF

maven_contributor_organizationUrl_doc := << EOF
The URL of the organization.
EOF

maven_contributor_roles_doc := << EOF
The roles the contributor plays in the project. Each role is described
by a role element, the body of which is a role name.
EOF

maven_contributor_timezone_doc := << EOF
The timezone the contributor is in. This is a number in the range -11 to 12.
EOF

maven_contributor_properties_doc := << EOF
Properties about the contributor, such as an instant messenger handle.
EOF

maven_license_doc := << EOF
Describes the licenses for this project. This is used to generate the
License page of the project's web site. Typically the licenses listed
for the project are that of the project itself, and not of
maven_dependencies.
EOF

maven_license_name_doc := << EOF
The full legal name of the license.
EOF

maven_license_url_doc := << EOF
The official url for the license text.
EOF

maven_license_distribution_doc := << EOF
The primary method by which this project may be distributed.
EOF

maven_license_repo_doc := << EOF
may be downloaded from the Maven repository
EOF

maven_license_manual_doc := << EOF
user must manually download and install the dependency.
EOF

maven_license_comments_doc := << EOF
Addendum information pertaining to this license.
EOF

maven_version_doc := << EOF
This element describes each of the previous versions of the project.
Each version is described by a version element
EOF

maven_version_name_doc := << EOF
The external version number under which this release was distributed.
Examples include:  1.0, 1.1-alpha1, 1.2-beta, 1.3.2 etc.
EOF

maven_version_tag_doc := << EOF
The name given in the version control system (e.g. cvs) used by the
project for the source code associated with this version of the
project.
EOF

maven_version_id_doc := << EOF
A unique identifier for a version. This ID is used to specify the
version that maven:dist builds.
EOF

#  <branches>
#    <branch>
#      <tag/>
#    </branch>
#  </branches>
maven_branch_doc := << EOF
Optional. Contains information on branches of the project. This
information is used when invoking the maven:dist target.
EOF

maven_branch_tag_doc := << EOF
The branch tag in the version control system (e.g. cvs) used by the
project for the source code associated with this branch of the project.
EOF

#  <packageGroups>
#    <packageGroup>
#      <title/>
#      <packages/>
#    </packageGroup>
#  </packageGroups>
maven_packageGroup_doc := << EOF
The packageGroup.
EOF

maven_packageGroup_title_doc := << EOF
The packageGroup title.
EOF

maven_packageGroup_packages_doc := << EOF
The packageGroup packages
EOF

#  <repository>
#    <connection/>
#    <developerConnection/>
#    <url/>
#  </repository>
maven_project_repository_doc := << EOF
Specification for the SCM used by the project.
EOF

maven_repository_connection_doc := << EOF
Optional. The source configuration management system URL that describes
the repository and how to connect to the repository. This is used by
Maven when building versions from specific ID.

The format of this element is as follows:
    scm:<provider>:<provider-parameters>

For cvs, the format for pserver repositories should be:
    scm:cvs:pserver:user@host:/cvs/root:module-name

For local networked repositories (eg. pserver to local machine)
    scm:cvs:lserver:user@host:/cvs/root:module-name

For ssh access:
    scm:cvs:ext:user@host:/cvs/root:module-name

Remember that CVS will expect an environment variable called CVS_RSH to
be set, typically to ssh or your ssh client.

Some cvs clients support other protocols, such as ntserver and extssh. 

Here's an example using CVS NT and ntserver:
    scm|cvs|ntserver|user@server|e:\cvs|Deployment

Note the use of the vertical bar as delimiter as the repository has a colon (:) in it.

For local file system repositories
    scm:cvs:local:ignored:/cvs/root:module-name

For StarTeam access:
    scm:starteam:username:password@host:port/project/view/folder

All of this information can be had from either the StarTeam Universal
Client (Tools->Server Administration->Server Properties) or from the
administrator.

The delimiter is determined by the character after "scm". eg.
scm|cvs|pserver|user@host|/cvs/root|module-name is equivalent to that
listed above. This can be useful for Windows users who have : in their
cvsroot parameter (eg. D:\cvsroot)

Where pserver is the protocol used to access CVS, user@host is the user
name to log in to the specified cvs host, /cvs/root is the cvs root 
directory, and module-name is the name of the cvs module to be worked on.

As an example, the settings for an Apache project are usually:
    scm:cvs:pserver:anoncvs@cvs.apache.org:/home/cvspublic:module-name

Currently CVS, Starteam and SubVersion are the only supported scm's. 
Others will be added as soon as possible
EOF

maven_repository_developerConnection_doc := << EOF
Just like connection, but for developers, i.e. this scm connection will
not be read only.
EOF

maven_repository_url_doc := << EOF
The URL to the project's browsable CVS repository.
EOF

#  <organization>
#    <name/>
#    <url/>
#    <logo/>
#  </organization>
maven_project_organization_doc := << EOF
This element describes various attributes of the organization to which
the project belongs. These attributes are utilized when documentation
is created (for copyright notices and links).
EOF

maven_organization_name_doc := << EOF
The full name of the organization.
EOF

maven_organization_url_doc := << EOF
The URL to the organization's home page.
EOF

maven_organization_logo_doc := << EOF
The URL to the organization's logo image. This can be an URL relative 
to the base directory of the generated web site, (e.g.,
/images/org-logo.png) or an absolute URL (e.g.,
http://my.corp/logo.png). This value is used when generating the
project documentation.
EOF

#  <build>
#    <nagEmailAddress/>
#    <sourceDirectory/>
#    <unitTestSourceDirectory/>
#    <aspectSourceDirectory/>
#    <integrationUnitTestSourceDirectory/>
#    <sourceModifications/>
#    <unitTest/>
#    <defaultGoal/>
#    <resources/>
#  </build>
maven_project_build_doc := << EOF
Information required to build the project.
EOF

maven_build_nagEmailAddress_doc := << EOF
An address to which notifications regarding the status of builds for
this project can be sent. This is intended for use by tools which do
unattended builds, for example those providing for continuous
integration. Currently this is used by the gump plugin target.
EOF

maven_build_sourceDirectory_doc := << EOF
This element specifies a directory containing the source of the
project. The generated build system will compile the source in this
directory when the project is built. The path given is relative to the
project descriptor.
EOF

maven_build_unitTestSourceDirectory_doc := << EOF
This element specifies a directory containing the unit test source of
the project. The generated build system will compile these directories
when the project is being tested. The unit tests must use the JUnit test
framework.  The path given is relative to the project descriptor.
EOF

maven_build_aspectSourceDirectory_doc := << EOF
This element specifies a directory containing Aspect sources of the
project. The generated build system will compile the Aspects in this
directory when the project is built if Aspects have been enabled (see
the Aspectj goals document). The path given is relative to the project
descriptor.
EOF

maven_build_integrationUnitTestSourceDirectory_doc := << EOF
This element specifies a directory containing integration test sources
of the project.
EOF

maven_build_sourceModifications_doc := << EOF
This element describes all of the sourceModifications associated with a
project. Each source modification is described by a sourceModification
element, which is then described by additional elements (described
below). These modifications are used to exclude or include various
source depending on the environment the build is running in.
EOF

maven_build_unitTest_doc := << EOF
This element specifies unit tests associated with the project.
EOF

maven_build_defaultGoal_doc := << EOF
The default goal (or phase in Maven 2) to execute when none is specified
for the project.
EOF

maven_build_resources_doc := << EOF
This element describes all of the resources associated with a project or
unit tests. Each resource is described by a resource element, which is
then described by additional elements (described below). These resources
are used to complete the jar file or to run unit test.
EOF

#    <sourceModifications>
#      <sourceModification>
#        <className/>
#        <property/>
#        <directory/>
#        <includes/>
#        <excludes/>
#      </sourceModification>
#    </sourceModifications>

maven_sourceModification_doc := << EOF
This element describes all of the sourceModifications associated with a 
project. Each source modification is described by a sourceModification
element, which is then described by additional elements (described
below). These modifications are used to exclude or include various
source depending on the environment the build is running in.
EOF

maven_sourceModification_className_doc := << EOF
If the class with this name can not be loaded, then the includes and
excludes specified below will be applied to the contents of the
EOF

maven_sourceModification_property_doc := << EOF
no description
EOF

maven_sourceModification_directory_doc := << EOF
Describe the directory where the resource is stored. The path may be
absolute, or relative to the project.xml file.
EOF

maven_sourceModification_includes_doc := << EOF
no description
EOF

maven_sourceModification_excludes_doc := << EOF
no description
EOF

#    <unitTest>
#      <resources>
#        <resource>
#          <targetPath/>
#          <filtering/>
#          <directory/>
#          <includes/>
#          <excludes/>
#        </resource>
#      </resources>
#      <includes/>
#      <excludes/>
#    </unitTest>
maven_unitTest_doc := << EOF
EOF

maven_unitTest_resources_doc := << EOF
no description
EOF

maven_unitTest_includes_doc := << EOF
no description
EOF

maven_unitTest_excludes_doc := << EOF
no description
EOF

#    <resources>
#      <resource>
#        <targetPath/>
#        <filtering/>
#        <directory/>
#        <includes/>
#        <excludes/>
#      </resource>
#    </resources>

maven_unitTest_resource_doc := << EOF
This element describes all of the resources associated with a project or
unit tests. Each resource is described by a resource element, which is
then described by additional elements (described below). These resources
are used to complete the jar file or to run unit test.
EOF

maven_unitTest_resource_targetPath_doc := << EOF
Describe the resource target path. For example, if you want that
resource appear into a specific package (org.apache.maven.messages), you
must specify this element with this value : org/apache/maven/messages
EOF

maven_unitTest_resource_filtering_doc := << EOF
Boolean. Describe if resources are filtered or not.
EOF

maven_unitTest_resource_directory_doc := << EOF
Describe the directory where the resource is stored.  The path may be
absolute, or relative to the project.xml file.
EOF

maven_unitTest_resource_includes_doc := << EOF
the description
EOF

maven_unitTest_resource_excludes_doc := << EOF
the description
EOF

maven_build_resource_doc =	$maven_unitTest_resource_doc
maven_build_resource_targetPath_doc =	$maven_unitTest_resource_targetPath_doc
maven_build_resource_filtering_doc =	$maven_unitTest_resource_filtering_doc
maven_build_resource_directory_doc =	$maven_unitTest_resource_directory_doc
maven_build_resource_includes_doc =	$maven_unitTest_resource_includes_doc
maven_build_resource_excludes_doc =	$maven_unitTest_resource_excludes_doc

#  <dependencies>
#    <dependency>
#      <id/>
#      <groupId/>
#      <artifactId/>
#      <version/>
#      <url/>
#      <jar/>
#      <type/>
#      <properties/>
#    </dependency>
#  </dependencies>
maven_dependency_doc := << EOF
This element describes a single dependency of this project.
EOF

maven_dependency_id_doc := << EOF
The name of the dependency.
Note: The use of the id element for a dependency is deprecated. Please
use groupId and artifactId together instead.
EOF

maven_dependency_groupId_doc := << EOF
The project group that produced the dependency, e.g. geronimo.
EOF

maven_dependency_artifactId_doc := << EOF
The unique id for an artifact produced by the project group, e.g. germonimo-jms
EOF

maven_dependency_version_doc := << EOF
The version of the dependency, e.g. 3.2.1
EOF

maven_dependency_url_doc := << EOF
This url will be provided to the user if the jar file cannot be
downloaded from the central repository.
EOF

maven_dependency_jar_doc := << EOF
Literal name of the artifact. Used to override the calculated artifact name.
EOF

maven_dependency_type_doc := << EOF
The type of dependency. This defaults to jar.  Known recognised dependency types are:
    jar
    ejb
    plugin
EOF

maven_dependency_properties_doc := << EOF
Properties about the dependency. Various plugins allow you to mark
dependencies with properties. For example the war plugin looks for a
war.bundle property, and if found will include the dependency in
WEB-INF/lib. For example syntax, check the war plugin docs.
EOF

