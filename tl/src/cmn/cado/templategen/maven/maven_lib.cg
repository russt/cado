#
# WARNING:  this library is generated, DO NOT EDIT.  Run "codegen genmavenlib.cg: instead
#
# This library is used to generate maven project.xml files, from simple declarations.
#

#only include this once:
%ifdef MAVEN_POM_GENERATOR_INCLUDED %return

%include xml/xml_macros.cg
%include maven/maven_doc.defs

#initialize some globals:
parent_instance_count_ptr = headless_instance_count
$parent_instance_count_ptr = 00

parent_macro_name_ptr = headless_macro_name
$parent_macro_name_ptr = NULL_PARENT

#set this to zero to avoid generating empty elements:
%ifndef MAVEN_LIB_GENERATE_EMPTY_ELEMENTS   MAVEN_LIB_GENERATE_EMPTY_ELEMENTS = 1

#default POM version:
MAVEN_PROJECT_POMVERSION = 3

#always generate the <project> element:
MAVEN_PROJECT_COUNT = 1

%undef MAVEN_LIB_VERBOSE 

children =

maven_mailingList_name := << EOF

{# maven_mailingList_name

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_mailingList_name: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_name: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_name: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_MAILINGLIST_NAME_01 not defined, then check for MAVEN_MAILINGLIST_NAME:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_MAILINGLIST_NAME_01    _element_body_ptr = MAVEN_MAILINGLIST_NAME
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_MAILINGLIST_NAME_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_mailingList_name: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_MAILINGLIST_NAME_$_pinstance_count and/or MAVEN_MAILINGLIST_NAME is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	name
    %ifndef maven_mailingList_name_documented	XML_ELEMENT_DOC = $maven_mailingList_name_doc
    maven_mailingList_name_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_mailingList_subscribe := << EOF

{# maven_mailingList_subscribe

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_mailingList_subscribe: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_subscribe: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_subscribe: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_MAILINGLIST_SUBSCRIBE_01 not defined, then check for MAVEN_MAILINGLIST_SUBSCRIBE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_MAILINGLIST_SUBSCRIBE_01    _element_body_ptr = MAVEN_MAILINGLIST_SUBSCRIBE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_MAILINGLIST_SUBSCRIBE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_mailingList_subscribe: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_MAILINGLIST_SUBSCRIBE_$_pinstance_count and/or MAVEN_MAILINGLIST_SUBSCRIBE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	subscribe
    %ifndef maven_mailingList_subscribe_documented	XML_ELEMENT_DOC = $maven_mailingList_subscribe_doc
    maven_mailingList_subscribe_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_mailingList_unsubscribe := << EOF

{# maven_mailingList_unsubscribe

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_mailingList_unsubscribe: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_unsubscribe: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_unsubscribe: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_MAILINGLIST_UNSUBSCRIBE_01 not defined, then check for MAVEN_MAILINGLIST_UNSUBSCRIBE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_MAILINGLIST_UNSUBSCRIBE_01    _element_body_ptr = MAVEN_MAILINGLIST_UNSUBSCRIBE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_MAILINGLIST_UNSUBSCRIBE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_mailingList_unsubscribe: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_MAILINGLIST_UNSUBSCRIBE_$_pinstance_count and/or MAVEN_MAILINGLIST_UNSUBSCRIBE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	unsubscribe
    %ifndef maven_mailingList_unsubscribe_documented	XML_ELEMENT_DOC = $maven_mailingList_unsubscribe_doc
    maven_mailingList_unsubscribe_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_mailingList_post := << EOF

{# maven_mailingList_post

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_mailingList_post: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_post: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_post: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_MAILINGLIST_POST_01 not defined, then check for MAVEN_MAILINGLIST_POST:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_MAILINGLIST_POST_01    _element_body_ptr = MAVEN_MAILINGLIST_POST
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_MAILINGLIST_POST_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_mailingList_post: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_MAILINGLIST_POST_$_pinstance_count and/or MAVEN_MAILINGLIST_POST is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	post
    %ifndef maven_mailingList_post_documented	XML_ELEMENT_DOC = $maven_mailingList_post_doc
    maven_mailingList_post_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_mailingList_archive := << EOF

{# maven_mailingList_archive

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_mailingList_archive: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_archive: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_archive: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_MAILINGLIST_ARCHIVE_01 not defined, then check for MAVEN_MAILINGLIST_ARCHIVE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_MAILINGLIST_ARCHIVE_01    _element_body_ptr = MAVEN_MAILINGLIST_ARCHIVE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_MAILINGLIST_ARCHIVE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_mailingList_archive: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_MAILINGLIST_ARCHIVE_$_pinstance_count and/or MAVEN_MAILINGLIST_ARCHIVE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	archive
    %ifndef maven_mailingList_archive_documented	XML_ELEMENT_DOC = $maven_mailingList_archive_doc
    maven_mailingList_archive_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_mailingList_otherArchives := << EOF

{# maven_mailingList_otherArchives

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_mailingList_otherArchives: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_otherArchives: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_mailingList_otherArchives: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_MAILINGLIST_OTHERARCHIVES_01 not defined, then check for MAVEN_MAILINGLIST_OTHERARCHIVES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_MAILINGLIST_OTHERARCHIVES_01    _element_body_ptr = MAVEN_MAILINGLIST_OTHERARCHIVES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_MAILINGLIST_OTHERARCHIVES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_mailingList_otherArchives: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_MAILINGLIST_OTHERARCHIVES_$_pinstance_count and/or MAVEN_MAILINGLIST_OTHERARCHIVES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	otherArchives
    %ifndef maven_mailingList_otherArchives_documented	XML_ELEMENT_DOC = $maven_mailingList_otherArchives_doc
    maven_mailingList_otherArchives_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_mailingList
maven_mailingList := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_MAILINGLIST_COUNT MAVEN_MAILINGLIST_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_mailingList: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_MAILINGLIST_$_pinstance_count and/or MAVEN_MAILINGLIST is undefined
    %ifnot $MAVEN_MAILINGLIST_COUNT %return $_msg

gen_maven_mailingList_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_mailingList_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_mailingList_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_mailingList_name
%call maven_mailingList_subscribe
%call maven_mailingList_unsubscribe
%call maven_mailingList_post
%call maven_mailingList_archive
%call maven_mailingList_otherArchives

    #now generate me:
    XML_ELEMENT_NAME =	mailingList
    %ifndef maven_mailingList_documented	XML_ELEMENT_DOC = $maven_mailingList_doc
    maven_mailingList_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_mailingList_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_mailingList_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_mailingList_instance_count

    #generate MAVEN_MAILINGLIST_COUNT element instances::
    maven_mailingList_ninstances = $MAVEN_MAILINGLIST_COUNT:incr
    maven_mailingList_instance_count = 00
#%eecho maven_mailingList_ninstances=$maven_mailingList_ninstances

    %while $maven_mailingList_ninstances:decr:assign %call gen_maven_mailingList_elements
    #%call gen_maven_mailingList_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_mailingList_save_ICptr
EOF
}

{# maven_project_mailingLists
maven_project_mailingLists := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_MAILINGLISTS_COUNT MAVEN_PROJECT_MAILINGLISTS_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_mailingLists: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_MAILINGLISTS_$_pinstance_count and/or MAVEN_PROJECT_MAILINGLISTS is undefined
    %ifnot $MAVEN_PROJECT_MAILINGLISTS_COUNT %return $_msg

gen_maven_project_mailingLists_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_mailingLists_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_mailingLists_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_mailingList

    #now generate me:
    XML_ELEMENT_NAME =	mailingLists
    %ifndef maven_project_mailingLists_documented	XML_ELEMENT_DOC = $maven_project_mailingLists_doc
    maven_project_mailingLists_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_mailingLists_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_mailingLists_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_mailingLists_instance_count

    #generate MAVEN_PROJECT_MAILINGLISTS_COUNT element instances::
    maven_project_mailingLists_ninstances = $MAVEN_PROJECT_MAILINGLISTS_COUNT:incr
    maven_project_mailingLists_instance_count = 00
#%eecho maven_project_mailingLists_ninstances=$maven_project_mailingLists_ninstances

    %while $maven_project_mailingLists_ninstances:decr:assign %call gen_maven_project_mailingLists_elements
    #%call gen_maven_project_mailingLists_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_mailingLists_save_ICptr
EOF
}

maven_developer_id := << EOF

{# maven_developer_id

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_id: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_id: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_id: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_ID_01 not defined, then check for MAVEN_DEVELOPER_ID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_ID_01    _element_body_ptr = MAVEN_DEVELOPER_ID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_ID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_id: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_ID_$_pinstance_count and/or MAVEN_DEVELOPER_ID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	id
    %ifndef maven_developer_id_documented	XML_ELEMENT_DOC = $maven_developer_id_doc
    maven_developer_id_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_developer_name := << EOF

{# maven_developer_name

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_name: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_name: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_name: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_NAME_01 not defined, then check for MAVEN_DEVELOPER_NAME:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_NAME_01    _element_body_ptr = MAVEN_DEVELOPER_NAME
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_NAME_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_name: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_NAME_$_pinstance_count and/or MAVEN_DEVELOPER_NAME is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	name
    %ifndef maven_developer_name_documented	XML_ELEMENT_DOC = $maven_developer_name_doc
    maven_developer_name_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_developer_email := << EOF

{# maven_developer_email

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_email: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_email: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_email: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_EMAIL_01 not defined, then check for MAVEN_DEVELOPER_EMAIL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_EMAIL_01    _element_body_ptr = MAVEN_DEVELOPER_EMAIL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_EMAIL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_email: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_EMAIL_$_pinstance_count and/or MAVEN_DEVELOPER_EMAIL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	email
    %ifndef maven_developer_email_documented	XML_ELEMENT_DOC = $maven_developer_email_doc
    maven_developer_email_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_developer_url := << EOF

{# maven_developer_url

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_url: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_url: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_url: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_URL_01 not defined, then check for MAVEN_DEVELOPER_URL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_URL_01    _element_body_ptr = MAVEN_DEVELOPER_URL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_URL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_url: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_URL_$_pinstance_count and/or MAVEN_DEVELOPER_URL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	url
    %ifndef maven_developer_url_documented	XML_ELEMENT_DOC = $maven_developer_url_doc
    maven_developer_url_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_developer_organization := << EOF

{# maven_developer_organization

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_organization: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_organization: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_organization: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_ORGANIZATION_01 not defined, then check for MAVEN_DEVELOPER_ORGANIZATION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_ORGANIZATION_01    _element_body_ptr = MAVEN_DEVELOPER_ORGANIZATION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_ORGANIZATION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_organization: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_ORGANIZATION_$_pinstance_count and/or MAVEN_DEVELOPER_ORGANIZATION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	organization
    %ifndef maven_developer_organization_documented	XML_ELEMENT_DOC = $maven_developer_organization_doc
    maven_developer_organization_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_developer_organizationUrl := << EOF

{# maven_developer_organizationUrl

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_organizationUrl: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_organizationUrl: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_organizationUrl: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_ORGANIZATIONURL_01 not defined, then check for MAVEN_DEVELOPER_ORGANIZATIONURL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_ORGANIZATIONURL_01    _element_body_ptr = MAVEN_DEVELOPER_ORGANIZATIONURL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_ORGANIZATIONURL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_organizationUrl: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_ORGANIZATIONURL_$_pinstance_count and/or MAVEN_DEVELOPER_ORGANIZATIONURL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	organizationUrl
    %ifndef maven_developer_organizationUrl_documented	XML_ELEMENT_DOC = $maven_developer_organizationUrl_doc
    maven_developer_organizationUrl_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_developer_roles := << EOF

{# maven_developer_roles

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_roles: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_roles: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_roles: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_ROLES_01 not defined, then check for MAVEN_DEVELOPER_ROLES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_ROLES_01    _element_body_ptr = MAVEN_DEVELOPER_ROLES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_ROLES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_roles: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_ROLES_$_pinstance_count and/or MAVEN_DEVELOPER_ROLES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	roles
    %ifndef maven_developer_roles_documented	XML_ELEMENT_DOC = $maven_developer_roles_doc
    maven_developer_roles_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_developer_timezone := << EOF

{# maven_developer_timezone

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_timezone: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_timezone: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_timezone: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_TIMEZONE_01 not defined, then check for MAVEN_DEVELOPER_TIMEZONE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_TIMEZONE_01    _element_body_ptr = MAVEN_DEVELOPER_TIMEZONE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_TIMEZONE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_timezone: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_TIMEZONE_$_pinstance_count and/or MAVEN_DEVELOPER_TIMEZONE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	timezone
    %ifndef maven_developer_timezone_documented	XML_ELEMENT_DOC = $maven_developer_timezone_doc
    maven_developer_timezone_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_developer_properties := << EOF

{# maven_developer_properties

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_developer_properties: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_properties: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_developer_properties: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEVELOPER_PROPERTIES_01 not defined, then check for MAVEN_DEVELOPER_PROPERTIES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEVELOPER_PROPERTIES_01    _element_body_ptr = MAVEN_DEVELOPER_PROPERTIES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEVELOPER_PROPERTIES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer_properties: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_PROPERTIES_$_pinstance_count and/or MAVEN_DEVELOPER_PROPERTIES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	properties
    %ifndef maven_developer_properties_documented	XML_ELEMENT_DOC = $maven_developer_properties_doc
    maven_developer_properties_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_developer
maven_developer := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_DEVELOPER_COUNT MAVEN_DEVELOPER_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_developer: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEVELOPER_$_pinstance_count and/or MAVEN_DEVELOPER is undefined
    %ifnot $MAVEN_DEVELOPER_COUNT %return $_msg

gen_maven_developer_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_developer_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_developer_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_developer_id
%call maven_developer_name
%call maven_developer_email
%call maven_developer_url
%call maven_developer_organization
%call maven_developer_organizationUrl
%call maven_developer_roles
%call maven_developer_timezone
%call maven_developer_properties

    #now generate me:
    XML_ELEMENT_NAME =	developer
    %ifndef maven_developer_documented	XML_ELEMENT_DOC = $maven_developer_doc
    maven_developer_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_developer_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_developer_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_developer_instance_count

    #generate MAVEN_DEVELOPER_COUNT element instances::
    maven_developer_ninstances = $MAVEN_DEVELOPER_COUNT:incr
    maven_developer_instance_count = 00
#%eecho maven_developer_ninstances=$maven_developer_ninstances

    %while $maven_developer_ninstances:decr:assign %call gen_maven_developer_elements
    #%call gen_maven_developer_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_developer_save_ICptr
EOF
}

{# maven_project_developers
maven_project_developers := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_DEVELOPERS_COUNT MAVEN_PROJECT_DEVELOPERS_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_developers: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_DEVELOPERS_$_pinstance_count and/or MAVEN_PROJECT_DEVELOPERS is undefined
    %ifnot $MAVEN_PROJECT_DEVELOPERS_COUNT %return $_msg

gen_maven_project_developers_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_developers_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_developers_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_developer

    #now generate me:
    XML_ELEMENT_NAME =	developers
    %ifndef maven_project_developers_documented	XML_ELEMENT_DOC = $maven_project_developers_doc
    maven_project_developers_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_developers_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_developers_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_developers_instance_count

    #generate MAVEN_PROJECT_DEVELOPERS_COUNT element instances::
    maven_project_developers_ninstances = $MAVEN_PROJECT_DEVELOPERS_COUNT:incr
    maven_project_developers_instance_count = 00
#%eecho maven_project_developers_ninstances=$maven_project_developers_ninstances

    %while $maven_project_developers_ninstances:decr:assign %call gen_maven_project_developers_elements
    #%call gen_maven_project_developers_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_developers_save_ICptr
EOF
}

maven_contributor_name := << EOF

{# maven_contributor_name

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_contributor_name: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_name: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_name: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_CONTRIBUTOR_NAME_01 not defined, then check for MAVEN_CONTRIBUTOR_NAME:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_CONTRIBUTOR_NAME_01    _element_body_ptr = MAVEN_CONTRIBUTOR_NAME
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_CONTRIBUTOR_NAME_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor_name: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_NAME_$_pinstance_count and/or MAVEN_CONTRIBUTOR_NAME is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	name
    %ifndef maven_contributor_name_documented	XML_ELEMENT_DOC = $maven_contributor_name_doc
    maven_contributor_name_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_contributor_email := << EOF

{# maven_contributor_email

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_contributor_email: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_email: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_email: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_CONTRIBUTOR_EMAIL_01 not defined, then check for MAVEN_CONTRIBUTOR_EMAIL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_CONTRIBUTOR_EMAIL_01    _element_body_ptr = MAVEN_CONTRIBUTOR_EMAIL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_CONTRIBUTOR_EMAIL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor_email: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_EMAIL_$_pinstance_count and/or MAVEN_CONTRIBUTOR_EMAIL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	email
    %ifndef maven_contributor_email_documented	XML_ELEMENT_DOC = $maven_contributor_email_doc
    maven_contributor_email_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_contributor_url := << EOF

{# maven_contributor_url

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_contributor_url: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_url: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_url: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_CONTRIBUTOR_URL_01 not defined, then check for MAVEN_CONTRIBUTOR_URL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_CONTRIBUTOR_URL_01    _element_body_ptr = MAVEN_CONTRIBUTOR_URL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_CONTRIBUTOR_URL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor_url: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_URL_$_pinstance_count and/or MAVEN_CONTRIBUTOR_URL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	url
    %ifndef maven_contributor_url_documented	XML_ELEMENT_DOC = $maven_contributor_url_doc
    maven_contributor_url_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_contributor_organization := << EOF

{# maven_contributor_organization

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_contributor_organization: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_organization: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_organization: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_CONTRIBUTOR_ORGANIZATION_01 not defined, then check for MAVEN_CONTRIBUTOR_ORGANIZATION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_CONTRIBUTOR_ORGANIZATION_01    _element_body_ptr = MAVEN_CONTRIBUTOR_ORGANIZATION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_CONTRIBUTOR_ORGANIZATION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor_organization: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_ORGANIZATION_$_pinstance_count and/or MAVEN_CONTRIBUTOR_ORGANIZATION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	organization
    %ifndef maven_contributor_organization_documented	XML_ELEMENT_DOC = $maven_contributor_organization_doc
    maven_contributor_organization_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_contributor_organizationUrl := << EOF

{# maven_contributor_organizationUrl

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_contributor_organizationUrl: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_organizationUrl: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_organizationUrl: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_CONTRIBUTOR_ORGANIZATIONURL_01 not defined, then check for MAVEN_CONTRIBUTOR_ORGANIZATIONURL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_CONTRIBUTOR_ORGANIZATIONURL_01    _element_body_ptr = MAVEN_CONTRIBUTOR_ORGANIZATIONURL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_CONTRIBUTOR_ORGANIZATIONURL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor_organizationUrl: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_ORGANIZATIONURL_$_pinstance_count and/or MAVEN_CONTRIBUTOR_ORGANIZATIONURL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	organizationUrl
    %ifndef maven_contributor_organizationUrl_documented	XML_ELEMENT_DOC = $maven_contributor_organizationUrl_doc
    maven_contributor_organizationUrl_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_contributor_roles := << EOF

{# maven_contributor_roles

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_contributor_roles: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_roles: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_roles: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_CONTRIBUTOR_ROLES_01 not defined, then check for MAVEN_CONTRIBUTOR_ROLES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_CONTRIBUTOR_ROLES_01    _element_body_ptr = MAVEN_CONTRIBUTOR_ROLES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_CONTRIBUTOR_ROLES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor_roles: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_ROLES_$_pinstance_count and/or MAVEN_CONTRIBUTOR_ROLES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	roles
    %ifndef maven_contributor_roles_documented	XML_ELEMENT_DOC = $maven_contributor_roles_doc
    maven_contributor_roles_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_contributor_timezone := << EOF

{# maven_contributor_timezone

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_contributor_timezone: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_timezone: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_timezone: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_CONTRIBUTOR_TIMEZONE_01 not defined, then check for MAVEN_CONTRIBUTOR_TIMEZONE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_CONTRIBUTOR_TIMEZONE_01    _element_body_ptr = MAVEN_CONTRIBUTOR_TIMEZONE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_CONTRIBUTOR_TIMEZONE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor_timezone: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_TIMEZONE_$_pinstance_count and/or MAVEN_CONTRIBUTOR_TIMEZONE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	timezone
    %ifndef maven_contributor_timezone_documented	XML_ELEMENT_DOC = $maven_contributor_timezone_doc
    maven_contributor_timezone_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_contributor_properties := << EOF

{# maven_contributor_properties

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_contributor_properties: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_properties: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_contributor_properties: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_CONTRIBUTOR_PROPERTIES_01 not defined, then check for MAVEN_CONTRIBUTOR_PROPERTIES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_CONTRIBUTOR_PROPERTIES_01    _element_body_ptr = MAVEN_CONTRIBUTOR_PROPERTIES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_CONTRIBUTOR_PROPERTIES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor_properties: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_PROPERTIES_$_pinstance_count and/or MAVEN_CONTRIBUTOR_PROPERTIES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	properties
    %ifndef maven_contributor_properties_documented	XML_ELEMENT_DOC = $maven_contributor_properties_doc
    maven_contributor_properties_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_contributor
maven_contributor := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_CONTRIBUTOR_COUNT MAVEN_CONTRIBUTOR_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_contributor: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_CONTRIBUTOR_$_pinstance_count and/or MAVEN_CONTRIBUTOR is undefined
    %ifnot $MAVEN_CONTRIBUTOR_COUNT %return $_msg

gen_maven_contributor_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_contributor_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_contributor_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_contributor_name
%call maven_contributor_email
%call maven_contributor_url
%call maven_contributor_organization
%call maven_contributor_organizationUrl
%call maven_contributor_roles
%call maven_contributor_timezone
%call maven_contributor_properties

    #now generate me:
    XML_ELEMENT_NAME =	contributor
    %ifndef maven_contributor_documented	XML_ELEMENT_DOC = $maven_contributor_doc
    maven_contributor_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_contributor_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_contributor_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_contributor_instance_count

    #generate MAVEN_CONTRIBUTOR_COUNT element instances::
    maven_contributor_ninstances = $MAVEN_CONTRIBUTOR_COUNT:incr
    maven_contributor_instance_count = 00
#%eecho maven_contributor_ninstances=$maven_contributor_ninstances

    %while $maven_contributor_ninstances:decr:assign %call gen_maven_contributor_elements
    #%call gen_maven_contributor_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_contributor_save_ICptr
EOF
}

{# maven_project_contributors
maven_project_contributors := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_CONTRIBUTORS_COUNT MAVEN_PROJECT_CONTRIBUTORS_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_contributors: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_CONTRIBUTORS_$_pinstance_count and/or MAVEN_PROJECT_CONTRIBUTORS is undefined
    %ifnot $MAVEN_PROJECT_CONTRIBUTORS_COUNT %return $_msg

gen_maven_project_contributors_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_contributors_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_contributors_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_contributor

    #now generate me:
    XML_ELEMENT_NAME =	contributors
    %ifndef maven_project_contributors_documented	XML_ELEMENT_DOC = $maven_project_contributors_doc
    maven_project_contributors_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_contributors_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_contributors_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_contributors_instance_count

    #generate MAVEN_PROJECT_CONTRIBUTORS_COUNT element instances::
    maven_project_contributors_ninstances = $MAVEN_PROJECT_CONTRIBUTORS_COUNT:incr
    maven_project_contributors_instance_count = 00
#%eecho maven_project_contributors_ninstances=$maven_project_contributors_ninstances

    %while $maven_project_contributors_ninstances:decr:assign %call gen_maven_project_contributors_elements
    #%call gen_maven_project_contributors_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_contributors_save_ICptr
EOF
}

maven_license_name := << EOF

{# maven_license_name

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_license_name: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_license_name: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_license_name: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_LICENSE_NAME_01 not defined, then check for MAVEN_LICENSE_NAME:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_LICENSE_NAME_01    _element_body_ptr = MAVEN_LICENSE_NAME
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_LICENSE_NAME_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_license_name: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_LICENSE_NAME_$_pinstance_count and/or MAVEN_LICENSE_NAME is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	name
    %ifndef maven_license_name_documented	XML_ELEMENT_DOC = $maven_license_name_doc
    maven_license_name_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_license_url := << EOF

{# maven_license_url

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_license_url: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_license_url: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_license_url: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_LICENSE_URL_01 not defined, then check for MAVEN_LICENSE_URL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_LICENSE_URL_01    _element_body_ptr = MAVEN_LICENSE_URL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_LICENSE_URL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_license_url: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_LICENSE_URL_$_pinstance_count and/or MAVEN_LICENSE_URL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	url
    %ifndef maven_license_url_documented	XML_ELEMENT_DOC = $maven_license_url_doc
    maven_license_url_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_license_distribution := << EOF

{# maven_license_distribution

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_license_distribution: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_license_distribution: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_license_distribution: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_LICENSE_DISTRIBUTION_01 not defined, then check for MAVEN_LICENSE_DISTRIBUTION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_LICENSE_DISTRIBUTION_01    _element_body_ptr = MAVEN_LICENSE_DISTRIBUTION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_LICENSE_DISTRIBUTION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_license_distribution: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_LICENSE_DISTRIBUTION_$_pinstance_count and/or MAVEN_LICENSE_DISTRIBUTION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	distribution
    %ifndef maven_license_distribution_documented	XML_ELEMENT_DOC = $maven_license_distribution_doc
    maven_license_distribution_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_license_comments := << EOF

{# maven_license_comments

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_license_comments: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_license_comments: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_license_comments: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_LICENSE_COMMENTS_01 not defined, then check for MAVEN_LICENSE_COMMENTS:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_LICENSE_COMMENTS_01    _element_body_ptr = MAVEN_LICENSE_COMMENTS
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_LICENSE_COMMENTS_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_license_comments: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_LICENSE_COMMENTS_$_pinstance_count and/or MAVEN_LICENSE_COMMENTS is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	comments
    %ifndef maven_license_comments_documented	XML_ELEMENT_DOC = $maven_license_comments_doc
    maven_license_comments_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_license
maven_license := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_LICENSE_COUNT MAVEN_LICENSE_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_license: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_LICENSE_$_pinstance_count and/or MAVEN_LICENSE is undefined
    %ifnot $MAVEN_LICENSE_COUNT %return $_msg

gen_maven_license_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_license_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_license_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_license_name
%call maven_license_url
%call maven_license_distribution
%call maven_license_comments

    #now generate me:
    XML_ELEMENT_NAME =	license
    %ifndef maven_license_documented	XML_ELEMENT_DOC = $maven_license_doc
    maven_license_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_license_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_license_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_license_instance_count

    #generate MAVEN_LICENSE_COUNT element instances::
    maven_license_ninstances = $MAVEN_LICENSE_COUNT:incr
    maven_license_instance_count = 00
#%eecho maven_license_ninstances=$maven_license_ninstances

    %while $maven_license_ninstances:decr:assign %call gen_maven_license_elements
    #%call gen_maven_license_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_license_save_ICptr
EOF
}

{# maven_project_licenses
maven_project_licenses := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_LICENSES_COUNT MAVEN_PROJECT_LICENSES_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_licenses: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_LICENSES_$_pinstance_count and/or MAVEN_PROJECT_LICENSES is undefined
    %ifnot $MAVEN_PROJECT_LICENSES_COUNT %return $_msg

gen_maven_project_licenses_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_licenses_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_licenses_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_license

    #now generate me:
    XML_ELEMENT_NAME =	licenses
    %ifndef maven_project_licenses_documented	XML_ELEMENT_DOC = $maven_project_licenses_doc
    maven_project_licenses_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_licenses_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_licenses_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_licenses_instance_count

    #generate MAVEN_PROJECT_LICENSES_COUNT element instances::
    maven_project_licenses_ninstances = $MAVEN_PROJECT_LICENSES_COUNT:incr
    maven_project_licenses_instance_count = 00
#%eecho maven_project_licenses_ninstances=$maven_project_licenses_ninstances

    %while $maven_project_licenses_ninstances:decr:assign %call gen_maven_project_licenses_elements
    #%call gen_maven_project_licenses_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_licenses_save_ICptr
EOF
}

maven_version_name := << EOF

{# maven_version_name

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_version_name: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_version_name: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_version_name: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_VERSION_NAME_01 not defined, then check for MAVEN_VERSION_NAME:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_VERSION_NAME_01    _element_body_ptr = MAVEN_VERSION_NAME
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_VERSION_NAME_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_version_name: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_VERSION_NAME_$_pinstance_count and/or MAVEN_VERSION_NAME is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	name
    %ifndef maven_version_name_documented	XML_ELEMENT_DOC = $maven_version_name_doc
    maven_version_name_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_version_tag := << EOF

{# maven_version_tag

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_version_tag: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_version_tag: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_version_tag: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_VERSION_TAG_01 not defined, then check for MAVEN_VERSION_TAG:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_VERSION_TAG_01    _element_body_ptr = MAVEN_VERSION_TAG
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_VERSION_TAG_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_version_tag: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_VERSION_TAG_$_pinstance_count and/or MAVEN_VERSION_TAG is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	tag
    %ifndef maven_version_tag_documented	XML_ELEMENT_DOC = $maven_version_tag_doc
    maven_version_tag_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_version_id := << EOF

{# maven_version_id

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_version_id: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_version_id: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_version_id: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_VERSION_ID_01 not defined, then check for MAVEN_VERSION_ID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_VERSION_ID_01    _element_body_ptr = MAVEN_VERSION_ID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_VERSION_ID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_version_id: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_VERSION_ID_$_pinstance_count and/or MAVEN_VERSION_ID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	id
    %ifndef maven_version_id_documented	XML_ELEMENT_DOC = $maven_version_id_doc
    maven_version_id_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_version
maven_version := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_VERSION_COUNT MAVEN_VERSION_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_version: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_VERSION_$_pinstance_count and/or MAVEN_VERSION is undefined
    %ifnot $MAVEN_VERSION_COUNT %return $_msg

gen_maven_version_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_version_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_version_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_version_name
%call maven_version_tag
%call maven_version_id

    #now generate me:
    XML_ELEMENT_NAME =	version
    %ifndef maven_version_documented	XML_ELEMENT_DOC = $maven_version_doc
    maven_version_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_version_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_version_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_version_instance_count

    #generate MAVEN_VERSION_COUNT element instances::
    maven_version_ninstances = $MAVEN_VERSION_COUNT:incr
    maven_version_instance_count = 00
#%eecho maven_version_ninstances=$maven_version_ninstances

    %while $maven_version_ninstances:decr:assign %call gen_maven_version_elements
    #%call gen_maven_version_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_version_save_ICptr
EOF
}

{# maven_project_versions
maven_project_versions := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_VERSIONS_COUNT MAVEN_PROJECT_VERSIONS_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_versions: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_VERSIONS_$_pinstance_count and/or MAVEN_PROJECT_VERSIONS is undefined
    %ifnot $MAVEN_PROJECT_VERSIONS_COUNT %return $_msg

gen_maven_project_versions_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_versions_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_versions_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_version

    #now generate me:
    XML_ELEMENT_NAME =	versions
    %ifndef maven_project_versions_documented	XML_ELEMENT_DOC = $maven_project_versions_doc
    maven_project_versions_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_versions_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_versions_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_versions_instance_count

    #generate MAVEN_PROJECT_VERSIONS_COUNT element instances::
    maven_project_versions_ninstances = $MAVEN_PROJECT_VERSIONS_COUNT:incr
    maven_project_versions_instance_count = 00
#%eecho maven_project_versions_ninstances=$maven_project_versions_ninstances

    %while $maven_project_versions_ninstances:decr:assign %call gen_maven_project_versions_elements
    #%call gen_maven_project_versions_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_versions_save_ICptr
EOF
}

maven_branch_tag := << EOF

{# maven_branch_tag

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_branch_tag: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_branch_tag: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_branch_tag: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BRANCH_TAG_01 not defined, then check for MAVEN_BRANCH_TAG:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BRANCH_TAG_01    _element_body_ptr = MAVEN_BRANCH_TAG
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BRANCH_TAG_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_branch_tag: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BRANCH_TAG_$_pinstance_count and/or MAVEN_BRANCH_TAG is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	tag
    %ifndef maven_branch_tag_documented	XML_ELEMENT_DOC = $maven_branch_tag_doc
    maven_branch_tag_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_branch
maven_branch := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_BRANCH_COUNT MAVEN_BRANCH_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_branch: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BRANCH_$_pinstance_count and/or MAVEN_BRANCH is undefined
    %ifnot $MAVEN_BRANCH_COUNT %return $_msg

gen_maven_branch_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_branch_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_branch_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_branch_tag

    #now generate me:
    XML_ELEMENT_NAME =	branch
    %ifndef maven_branch_documented	XML_ELEMENT_DOC = $maven_branch_doc
    maven_branch_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_branch_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_branch_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_branch_instance_count

    #generate MAVEN_BRANCH_COUNT element instances::
    maven_branch_ninstances = $MAVEN_BRANCH_COUNT:incr
    maven_branch_instance_count = 00
#%eecho maven_branch_ninstances=$maven_branch_ninstances

    %while $maven_branch_ninstances:decr:assign %call gen_maven_branch_elements
    #%call gen_maven_branch_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_branch_save_ICptr
EOF
}

{# maven_project_branches
maven_project_branches := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_BRANCHES_COUNT MAVEN_PROJECT_BRANCHES_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_branches: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_BRANCHES_$_pinstance_count and/or MAVEN_PROJECT_BRANCHES is undefined
    %ifnot $MAVEN_PROJECT_BRANCHES_COUNT %return $_msg

gen_maven_project_branches_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_branches_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_branches_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_branch

    #now generate me:
    XML_ELEMENT_NAME =	branches
    %ifndef maven_project_branches_documented	XML_ELEMENT_DOC = $maven_project_branches_doc
    maven_project_branches_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_branches_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_branches_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_branches_instance_count

    #generate MAVEN_PROJECT_BRANCHES_COUNT element instances::
    maven_project_branches_ninstances = $MAVEN_PROJECT_BRANCHES_COUNT:incr
    maven_project_branches_instance_count = 00
#%eecho maven_project_branches_ninstances=$maven_project_branches_ninstances

    %while $maven_project_branches_ninstances:decr:assign %call gen_maven_project_branches_elements
    #%call gen_maven_project_branches_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_branches_save_ICptr
EOF
}

maven_packageGroup_title := << EOF

{# maven_packageGroup_title

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_packageGroup_title: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_packageGroup_title: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_packageGroup_title: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PACKAGEGROUP_TITLE_01 not defined, then check for MAVEN_PACKAGEGROUP_TITLE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PACKAGEGROUP_TITLE_01    _element_body_ptr = MAVEN_PACKAGEGROUP_TITLE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PACKAGEGROUP_TITLE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_packageGroup_title: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PACKAGEGROUP_TITLE_$_pinstance_count and/or MAVEN_PACKAGEGROUP_TITLE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	title
    %ifndef maven_packageGroup_title_documented	XML_ELEMENT_DOC = $maven_packageGroup_title_doc
    maven_packageGroup_title_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_packageGroup_packages := << EOF

{# maven_packageGroup_packages

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_packageGroup_packages: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_packageGroup_packages: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_packageGroup_packages: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PACKAGEGROUP_PACKAGES_01 not defined, then check for MAVEN_PACKAGEGROUP_PACKAGES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PACKAGEGROUP_PACKAGES_01    _element_body_ptr = MAVEN_PACKAGEGROUP_PACKAGES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PACKAGEGROUP_PACKAGES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_packageGroup_packages: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PACKAGEGROUP_PACKAGES_$_pinstance_count and/or MAVEN_PACKAGEGROUP_PACKAGES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	packages
    %ifndef maven_packageGroup_packages_documented	XML_ELEMENT_DOC = $maven_packageGroup_packages_doc
    maven_packageGroup_packages_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_packageGroup
maven_packageGroup := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PACKAGEGROUP_COUNT MAVEN_PACKAGEGROUP_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_packageGroup: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PACKAGEGROUP_$_pinstance_count and/or MAVEN_PACKAGEGROUP is undefined
    %ifnot $MAVEN_PACKAGEGROUP_COUNT %return $_msg

gen_maven_packageGroup_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_packageGroup_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_packageGroup_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_packageGroup_title
%call maven_packageGroup_packages

    #now generate me:
    XML_ELEMENT_NAME =	packageGroup
    %ifndef maven_packageGroup_documented	XML_ELEMENT_DOC = $maven_packageGroup_doc
    maven_packageGroup_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_packageGroup_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_packageGroup_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_packageGroup_instance_count

    #generate MAVEN_PACKAGEGROUP_COUNT element instances::
    maven_packageGroup_ninstances = $MAVEN_PACKAGEGROUP_COUNT:incr
    maven_packageGroup_instance_count = 00
#%eecho maven_packageGroup_ninstances=$maven_packageGroup_ninstances

    %while $maven_packageGroup_ninstances:decr:assign %call gen_maven_packageGroup_elements
    #%call gen_maven_packageGroup_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_packageGroup_save_ICptr
EOF
}

{# maven_project_packageGroups
maven_project_packageGroups := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_PACKAGEGROUPS_COUNT MAVEN_PROJECT_PACKAGEGROUPS_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_packageGroups: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_PACKAGEGROUPS_$_pinstance_count and/or MAVEN_PROJECT_PACKAGEGROUPS is undefined
    %ifnot $MAVEN_PROJECT_PACKAGEGROUPS_COUNT %return $_msg

gen_maven_project_packageGroups_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_packageGroups_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_packageGroups_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_packageGroup

    #now generate me:
    XML_ELEMENT_NAME =	packageGroups
    %ifndef maven_project_packageGroups_documented	XML_ELEMENT_DOC = $maven_project_packageGroups_doc
    maven_project_packageGroups_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_packageGroups_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_packageGroups_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_packageGroups_instance_count

    #generate MAVEN_PROJECT_PACKAGEGROUPS_COUNT element instances::
    maven_project_packageGroups_ninstances = $MAVEN_PROJECT_PACKAGEGROUPS_COUNT:incr
    maven_project_packageGroups_instance_count = 00
#%eecho maven_project_packageGroups_ninstances=$maven_project_packageGroups_ninstances

    %while $maven_project_packageGroups_ninstances:decr:assign %call gen_maven_project_packageGroups_elements
    #%call gen_maven_project_packageGroups_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_packageGroups_save_ICptr
EOF
}

maven_repository_connection := << EOF

{# maven_repository_connection

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_repository_connection: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_repository_connection: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_repository_connection: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_REPOSITORY_CONNECTION_01 not defined, then check for MAVEN_REPOSITORY_CONNECTION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_REPOSITORY_CONNECTION_01    _element_body_ptr = MAVEN_REPOSITORY_CONNECTION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_REPOSITORY_CONNECTION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_repository_connection: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_REPOSITORY_CONNECTION_$_pinstance_count and/or MAVEN_REPOSITORY_CONNECTION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	connection
    %ifndef maven_repository_connection_documented	XML_ELEMENT_DOC = $maven_repository_connection_doc
    maven_repository_connection_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_repository_developerConnection := << EOF

{# maven_repository_developerConnection

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_repository_developerConnection: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_repository_developerConnection: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_repository_developerConnection: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_REPOSITORY_DEVELOPERCONNECTION_01 not defined, then check for MAVEN_REPOSITORY_DEVELOPERCONNECTION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_REPOSITORY_DEVELOPERCONNECTION_01    _element_body_ptr = MAVEN_REPOSITORY_DEVELOPERCONNECTION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_REPOSITORY_DEVELOPERCONNECTION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_repository_developerConnection: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_REPOSITORY_DEVELOPERCONNECTION_$_pinstance_count and/or MAVEN_REPOSITORY_DEVELOPERCONNECTION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	developerConnection
    %ifndef maven_repository_developerConnection_documented	XML_ELEMENT_DOC = $maven_repository_developerConnection_doc
    maven_repository_developerConnection_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_repository_url := << EOF

{# maven_repository_url

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_repository_url: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_repository_url: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_repository_url: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_REPOSITORY_URL_01 not defined, then check for MAVEN_REPOSITORY_URL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_REPOSITORY_URL_01    _element_body_ptr = MAVEN_REPOSITORY_URL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_REPOSITORY_URL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_repository_url: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_REPOSITORY_URL_$_pinstance_count and/or MAVEN_REPOSITORY_URL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	url
    %ifndef maven_repository_url_documented	XML_ELEMENT_DOC = $maven_repository_url_doc
    maven_repository_url_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_project_repository
maven_project_repository := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_REPOSITORY_COUNT MAVEN_PROJECT_REPOSITORY_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_repository: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_REPOSITORY_$_pinstance_count and/or MAVEN_PROJECT_REPOSITORY is undefined
    %ifnot $MAVEN_PROJECT_REPOSITORY_COUNT %return $_msg

gen_maven_project_repository_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_repository_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_repository_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_repository_connection
%call maven_repository_developerConnection
%call maven_repository_url

    #now generate me:
    XML_ELEMENT_NAME =	repository
    %ifndef maven_project_repository_documented	XML_ELEMENT_DOC = $maven_project_repository_doc
    maven_project_repository_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_repository_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_repository_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_repository_instance_count

    #generate MAVEN_PROJECT_REPOSITORY_COUNT element instances::
    maven_project_repository_ninstances = $MAVEN_PROJECT_REPOSITORY_COUNT:incr
    maven_project_repository_instance_count = 00
#%eecho maven_project_repository_ninstances=$maven_project_repository_ninstances

    %while $maven_project_repository_ninstances:decr:assign %call gen_maven_project_repository_elements
    #%call gen_maven_project_repository_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_repository_save_ICptr
EOF
}

maven_organization_name := << EOF

{# maven_organization_name

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_organization_name: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_organization_name: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_organization_name: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_ORGANIZATION_NAME_01 not defined, then check for MAVEN_ORGANIZATION_NAME:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_ORGANIZATION_NAME_01    _element_body_ptr = MAVEN_ORGANIZATION_NAME
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_ORGANIZATION_NAME_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_organization_name: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_ORGANIZATION_NAME_$_pinstance_count and/or MAVEN_ORGANIZATION_NAME is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	name
    %ifndef maven_organization_name_documented	XML_ELEMENT_DOC = $maven_organization_name_doc
    maven_organization_name_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_organization_url := << EOF

{# maven_organization_url

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_organization_url: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_organization_url: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_organization_url: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_ORGANIZATION_URL_01 not defined, then check for MAVEN_ORGANIZATION_URL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_ORGANIZATION_URL_01    _element_body_ptr = MAVEN_ORGANIZATION_URL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_ORGANIZATION_URL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_organization_url: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_ORGANIZATION_URL_$_pinstance_count and/or MAVEN_ORGANIZATION_URL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	url
    %ifndef maven_organization_url_documented	XML_ELEMENT_DOC = $maven_organization_url_doc
    maven_organization_url_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_organization_logo := << EOF

{# maven_organization_logo

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_organization_logo: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_organization_logo: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_organization_logo: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_ORGANIZATION_LOGO_01 not defined, then check for MAVEN_ORGANIZATION_LOGO:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_ORGANIZATION_LOGO_01    _element_body_ptr = MAVEN_ORGANIZATION_LOGO
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_ORGANIZATION_LOGO_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_organization_logo: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_ORGANIZATION_LOGO_$_pinstance_count and/or MAVEN_ORGANIZATION_LOGO is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	logo
    %ifndef maven_organization_logo_documented	XML_ELEMENT_DOC = $maven_organization_logo_doc
    maven_organization_logo_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_project_organization
maven_project_organization := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_ORGANIZATION_COUNT MAVEN_PROJECT_ORGANIZATION_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_organization: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_ORGANIZATION_$_pinstance_count and/or MAVEN_PROJECT_ORGANIZATION is undefined
    %ifnot $MAVEN_PROJECT_ORGANIZATION_COUNT %return $_msg

gen_maven_project_organization_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_organization_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_organization_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_organization_name
%call maven_organization_url
%call maven_organization_logo

    #now generate me:
    XML_ELEMENT_NAME =	organization
    %ifndef maven_project_organization_documented	XML_ELEMENT_DOC = $maven_project_organization_doc
    maven_project_organization_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_organization_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_organization_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_organization_instance_count

    #generate MAVEN_PROJECT_ORGANIZATION_COUNT element instances::
    maven_project_organization_ninstances = $MAVEN_PROJECT_ORGANIZATION_COUNT:incr
    maven_project_organization_instance_count = 00
#%eecho maven_project_organization_ninstances=$maven_project_organization_ninstances

    %while $maven_project_organization_ninstances:decr:assign %call gen_maven_project_organization_elements
    #%call gen_maven_project_organization_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_organization_save_ICptr
EOF
}

maven_sourceModification_className := << EOF

{# maven_sourceModification_className

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_sourceModification_className: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_className: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_className: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_SOURCEMODIFICATION_CLASSNAME_01 not defined, then check for MAVEN_SOURCEMODIFICATION_CLASSNAME:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_SOURCEMODIFICATION_CLASSNAME_01    _element_body_ptr = MAVEN_SOURCEMODIFICATION_CLASSNAME
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_SOURCEMODIFICATION_CLASSNAME_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_sourceModification_className: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_SOURCEMODIFICATION_CLASSNAME_$_pinstance_count and/or MAVEN_SOURCEMODIFICATION_CLASSNAME is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	className
    %ifndef maven_sourceModification_className_documented	XML_ELEMENT_DOC = $maven_sourceModification_className_doc
    maven_sourceModification_className_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_sourceModification_property := << EOF

{# maven_sourceModification_property

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_sourceModification_property: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_property: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_property: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_SOURCEMODIFICATION_PROPERTY_01 not defined, then check for MAVEN_SOURCEMODIFICATION_PROPERTY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_SOURCEMODIFICATION_PROPERTY_01    _element_body_ptr = MAVEN_SOURCEMODIFICATION_PROPERTY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_SOURCEMODIFICATION_PROPERTY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_sourceModification_property: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_SOURCEMODIFICATION_PROPERTY_$_pinstance_count and/or MAVEN_SOURCEMODIFICATION_PROPERTY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	property
    %ifndef maven_sourceModification_property_documented	XML_ELEMENT_DOC = $maven_sourceModification_property_doc
    maven_sourceModification_property_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_sourceModification_directory := << EOF

{# maven_sourceModification_directory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_sourceModification_directory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_directory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_directory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_SOURCEMODIFICATION_DIRECTORY_01 not defined, then check for MAVEN_SOURCEMODIFICATION_DIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_SOURCEMODIFICATION_DIRECTORY_01    _element_body_ptr = MAVEN_SOURCEMODIFICATION_DIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_SOURCEMODIFICATION_DIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_sourceModification_directory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_SOURCEMODIFICATION_DIRECTORY_$_pinstance_count and/or MAVEN_SOURCEMODIFICATION_DIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	directory
    %ifndef maven_sourceModification_directory_documented	XML_ELEMENT_DOC = $maven_sourceModification_directory_doc
    maven_sourceModification_directory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_sourceModification_includes := << EOF

{# maven_sourceModification_includes

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_sourceModification_includes: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_includes: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_includes: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_SOURCEMODIFICATION_INCLUDES_01 not defined, then check for MAVEN_SOURCEMODIFICATION_INCLUDES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_SOURCEMODIFICATION_INCLUDES_01    _element_body_ptr = MAVEN_SOURCEMODIFICATION_INCLUDES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_SOURCEMODIFICATION_INCLUDES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_sourceModification_includes: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_SOURCEMODIFICATION_INCLUDES_$_pinstance_count and/or MAVEN_SOURCEMODIFICATION_INCLUDES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	includes
    %ifndef maven_sourceModification_includes_documented	XML_ELEMENT_DOC = $maven_sourceModification_includes_doc
    maven_sourceModification_includes_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_sourceModification_excludes := << EOF

{# maven_sourceModification_excludes

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_sourceModification_excludes: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_excludes: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_sourceModification_excludes: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_SOURCEMODIFICATION_EXCLUDES_01 not defined, then check for MAVEN_SOURCEMODIFICATION_EXCLUDES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_SOURCEMODIFICATION_EXCLUDES_01    _element_body_ptr = MAVEN_SOURCEMODIFICATION_EXCLUDES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_SOURCEMODIFICATION_EXCLUDES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_sourceModification_excludes: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_SOURCEMODIFICATION_EXCLUDES_$_pinstance_count and/or MAVEN_SOURCEMODIFICATION_EXCLUDES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	excludes
    %ifndef maven_sourceModification_excludes_documented	XML_ELEMENT_DOC = $maven_sourceModification_excludes_doc
    maven_sourceModification_excludes_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_sourceModification
maven_sourceModification := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_SOURCEMODIFICATION_COUNT MAVEN_SOURCEMODIFICATION_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_sourceModification: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_SOURCEMODIFICATION_$_pinstance_count and/or MAVEN_SOURCEMODIFICATION is undefined
    %ifnot $MAVEN_SOURCEMODIFICATION_COUNT %return $_msg

gen_maven_sourceModification_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_sourceModification_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_sourceModification_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_sourceModification_className
%call maven_sourceModification_property
%call maven_sourceModification_directory
%call maven_sourceModification_includes
%call maven_sourceModification_excludes

    #now generate me:
    XML_ELEMENT_NAME =	sourceModification
    %ifndef maven_sourceModification_documented	XML_ELEMENT_DOC = $maven_sourceModification_doc
    maven_sourceModification_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_sourceModification_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_sourceModification_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_sourceModification_instance_count

    #generate MAVEN_SOURCEMODIFICATION_COUNT element instances::
    maven_sourceModification_ninstances = $MAVEN_SOURCEMODIFICATION_COUNT:incr
    maven_sourceModification_instance_count = 00
#%eecho maven_sourceModification_ninstances=$maven_sourceModification_ninstances

    %while $maven_sourceModification_ninstances:decr:assign %call gen_maven_sourceModification_elements
    #%call gen_maven_sourceModification_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_sourceModification_save_ICptr
EOF
}

{# maven_build_sourceModifications
maven_build_sourceModifications := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_BUILD_SOURCEMODIFICATIONS_COUNT MAVEN_BUILD_SOURCEMODIFICATIONS_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_sourceModifications: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_SOURCEMODIFICATIONS_$_pinstance_count and/or MAVEN_BUILD_SOURCEMODIFICATIONS is undefined
    %ifnot $MAVEN_BUILD_SOURCEMODIFICATIONS_COUNT %return $_msg

gen_maven_build_sourceModifications_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_build_sourceModifications_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_build_sourceModifications_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_sourceModification

    #now generate me:
    XML_ELEMENT_NAME =	sourceModifications
    %ifndef maven_build_sourceModifications_documented	XML_ELEMENT_DOC = $maven_build_sourceModifications_doc
    maven_build_sourceModifications_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_build_sourceModifications_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_build_sourceModifications_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_build_sourceModifications_instance_count

    #generate MAVEN_BUILD_SOURCEMODIFICATIONS_COUNT element instances::
    maven_build_sourceModifications_ninstances = $MAVEN_BUILD_SOURCEMODIFICATIONS_COUNT:incr
    maven_build_sourceModifications_instance_count = 00
#%eecho maven_build_sourceModifications_ninstances=$maven_build_sourceModifications_ninstances

    %while $maven_build_sourceModifications_ninstances:decr:assign %call gen_maven_build_sourceModifications_elements
    #%call gen_maven_build_sourceModifications_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_build_sourceModifications_save_ICptr
EOF
}

maven_unitTest_resource_targetPath := << EOF

{# maven_unitTest_resource_targetPath

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_unitTest_resource_targetPath: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_targetPath: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_targetPath: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_UNITTEST_RESOURCE_TARGETPATH_01 not defined, then check for MAVEN_UNITTEST_RESOURCE_TARGETPATH:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_UNITTEST_RESOURCE_TARGETPATH_01    _element_body_ptr = MAVEN_UNITTEST_RESOURCE_TARGETPATH
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_UNITTEST_RESOURCE_TARGETPATH_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_resource_targetPath: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_RESOURCE_TARGETPATH_$_pinstance_count and/or MAVEN_UNITTEST_RESOURCE_TARGETPATH is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	targetPath
    %ifndef maven_unitTest_resource_targetPath_documented	XML_ELEMENT_DOC = $maven_unitTest_resource_targetPath_doc
    maven_unitTest_resource_targetPath_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_unitTest_resource_filtering := << EOF

{# maven_unitTest_resource_filtering

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_unitTest_resource_filtering: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_filtering: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_filtering: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_UNITTEST_RESOURCE_FILTERING_01 not defined, then check for MAVEN_UNITTEST_RESOURCE_FILTERING:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_UNITTEST_RESOURCE_FILTERING_01    _element_body_ptr = MAVEN_UNITTEST_RESOURCE_FILTERING
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_UNITTEST_RESOURCE_FILTERING_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_resource_filtering: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_RESOURCE_FILTERING_$_pinstance_count and/or MAVEN_UNITTEST_RESOURCE_FILTERING is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	filtering
    %ifndef maven_unitTest_resource_filtering_documented	XML_ELEMENT_DOC = $maven_unitTest_resource_filtering_doc
    maven_unitTest_resource_filtering_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_unitTest_resource_directory := << EOF

{# maven_unitTest_resource_directory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_unitTest_resource_directory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_directory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_directory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_UNITTEST_RESOURCE_DIRECTORY_01 not defined, then check for MAVEN_UNITTEST_RESOURCE_DIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_UNITTEST_RESOURCE_DIRECTORY_01    _element_body_ptr = MAVEN_UNITTEST_RESOURCE_DIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_UNITTEST_RESOURCE_DIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_resource_directory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_RESOURCE_DIRECTORY_$_pinstance_count and/or MAVEN_UNITTEST_RESOURCE_DIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	directory
    %ifndef maven_unitTest_resource_directory_documented	XML_ELEMENT_DOC = $maven_unitTest_resource_directory_doc
    maven_unitTest_resource_directory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_unitTest_resource_includes := << EOF

{# maven_unitTest_resource_includes

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_unitTest_resource_includes: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_includes: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_includes: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_UNITTEST_RESOURCE_INCLUDES_01 not defined, then check for MAVEN_UNITTEST_RESOURCE_INCLUDES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_UNITTEST_RESOURCE_INCLUDES_01    _element_body_ptr = MAVEN_UNITTEST_RESOURCE_INCLUDES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_UNITTEST_RESOURCE_INCLUDES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_resource_includes: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_RESOURCE_INCLUDES_$_pinstance_count and/or MAVEN_UNITTEST_RESOURCE_INCLUDES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	includes
    %ifndef maven_unitTest_resource_includes_documented	XML_ELEMENT_DOC = $maven_unitTest_resource_includes_doc
    maven_unitTest_resource_includes_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_unitTest_resource_excludes := << EOF

{# maven_unitTest_resource_excludes

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_unitTest_resource_excludes: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_excludes: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_resource_excludes: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_UNITTEST_RESOURCE_EXCLUDES_01 not defined, then check for MAVEN_UNITTEST_RESOURCE_EXCLUDES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_UNITTEST_RESOURCE_EXCLUDES_01    _element_body_ptr = MAVEN_UNITTEST_RESOURCE_EXCLUDES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_UNITTEST_RESOURCE_EXCLUDES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_resource_excludes: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_RESOURCE_EXCLUDES_$_pinstance_count and/or MAVEN_UNITTEST_RESOURCE_EXCLUDES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	excludes
    %ifndef maven_unitTest_resource_excludes_documented	XML_ELEMENT_DOC = $maven_unitTest_resource_excludes_doc
    maven_unitTest_resource_excludes_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_unitTest_resource
maven_unitTest_resource := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_UNITTEST_RESOURCE_COUNT MAVEN_UNITTEST_RESOURCE_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_resource: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_RESOURCE_$_pinstance_count and/or MAVEN_UNITTEST_RESOURCE is undefined
    %ifnot $MAVEN_UNITTEST_RESOURCE_COUNT %return $_msg

gen_maven_unitTest_resource_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_unitTest_resource_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_unitTest_resource_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_unitTest_resource_targetPath
%call maven_unitTest_resource_filtering
%call maven_unitTest_resource_directory
%call maven_unitTest_resource_includes
%call maven_unitTest_resource_excludes

    #now generate me:
    XML_ELEMENT_NAME =	resource
    %ifndef maven_unitTest_resource_documented	XML_ELEMENT_DOC = $maven_unitTest_resource_doc
    maven_unitTest_resource_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_unitTest_resource_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_unitTest_resource_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_unitTest_resource_instance_count

    #generate MAVEN_UNITTEST_RESOURCE_COUNT element instances::
    maven_unitTest_resource_ninstances = $MAVEN_UNITTEST_RESOURCE_COUNT:incr
    maven_unitTest_resource_instance_count = 00
#%eecho maven_unitTest_resource_ninstances=$maven_unitTest_resource_ninstances

    %while $maven_unitTest_resource_ninstances:decr:assign %call gen_maven_unitTest_resource_elements
    #%call gen_maven_unitTest_resource_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_unitTest_resource_save_ICptr
EOF
}

{# maven_unitTest_resources
maven_unitTest_resources := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_UNITTEST_RESOURCES_COUNT MAVEN_UNITTEST_RESOURCES_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_resources: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_RESOURCES_$_pinstance_count and/or MAVEN_UNITTEST_RESOURCES is undefined
    %ifnot $MAVEN_UNITTEST_RESOURCES_COUNT %return $_msg

gen_maven_unitTest_resources_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_unitTest_resources_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_unitTest_resources_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_unitTest_resource

    #now generate me:
    XML_ELEMENT_NAME =	resources
    %ifndef maven_unitTest_resources_documented	XML_ELEMENT_DOC = $maven_unitTest_resources_doc
    maven_unitTest_resources_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_unitTest_resources_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_unitTest_resources_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_unitTest_resources_instance_count

    #generate MAVEN_UNITTEST_RESOURCES_COUNT element instances::
    maven_unitTest_resources_ninstances = $MAVEN_UNITTEST_RESOURCES_COUNT:incr
    maven_unitTest_resources_instance_count = 00
#%eecho maven_unitTest_resources_ninstances=$maven_unitTest_resources_ninstances

    %while $maven_unitTest_resources_ninstances:decr:assign %call gen_maven_unitTest_resources_elements
    #%call gen_maven_unitTest_resources_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_unitTest_resources_save_ICptr
EOF
}

maven_unitTest_includes := << EOF

{# maven_unitTest_includes

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_unitTest_includes: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_includes: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_includes: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_UNITTEST_INCLUDES_01 not defined, then check for MAVEN_UNITTEST_INCLUDES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_UNITTEST_INCLUDES_01    _element_body_ptr = MAVEN_UNITTEST_INCLUDES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_UNITTEST_INCLUDES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_includes: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_INCLUDES_$_pinstance_count and/or MAVEN_UNITTEST_INCLUDES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	includes
    %ifndef maven_unitTest_includes_documented	XML_ELEMENT_DOC = $maven_unitTest_includes_doc
    maven_unitTest_includes_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_unitTest_excludes := << EOF

{# maven_unitTest_excludes

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_unitTest_excludes: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_excludes: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_unitTest_excludes: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_UNITTEST_EXCLUDES_01 not defined, then check for MAVEN_UNITTEST_EXCLUDES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_UNITTEST_EXCLUDES_01    _element_body_ptr = MAVEN_UNITTEST_EXCLUDES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_UNITTEST_EXCLUDES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_unitTest_excludes: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_UNITTEST_EXCLUDES_$_pinstance_count and/or MAVEN_UNITTEST_EXCLUDES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	excludes
    %ifndef maven_unitTest_excludes_documented	XML_ELEMENT_DOC = $maven_unitTest_excludes_doc
    maven_unitTest_excludes_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_build_unitTest
maven_build_unitTest := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_BUILD_UNITTEST_COUNT MAVEN_BUILD_UNITTEST_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_unitTest: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_UNITTEST_$_pinstance_count and/or MAVEN_BUILD_UNITTEST is undefined
    %ifnot $MAVEN_BUILD_UNITTEST_COUNT %return $_msg

gen_maven_build_unitTest_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_build_unitTest_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_build_unitTest_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_unitTest_resources
%call maven_unitTest_includes
%call maven_unitTest_excludes

    #now generate me:
    XML_ELEMENT_NAME =	unitTest
    %ifndef maven_build_unitTest_documented	XML_ELEMENT_DOC = $maven_build_unitTest_doc
    maven_build_unitTest_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_build_unitTest_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_build_unitTest_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_build_unitTest_instance_count

    #generate MAVEN_BUILD_UNITTEST_COUNT element instances::
    maven_build_unitTest_ninstances = $MAVEN_BUILD_UNITTEST_COUNT:incr
    maven_build_unitTest_instance_count = 00
#%eecho maven_build_unitTest_ninstances=$maven_build_unitTest_ninstances

    %while $maven_build_unitTest_ninstances:decr:assign %call gen_maven_build_unitTest_elements
    #%call gen_maven_build_unitTest_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_build_unitTest_save_ICptr
EOF
}

maven_build_resource_targetPath := << EOF

{# maven_build_resource_targetPath

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_resource_targetPath: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_targetPath: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_targetPath: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_RESOURCE_TARGETPATH_01 not defined, then check for MAVEN_BUILD_RESOURCE_TARGETPATH:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_RESOURCE_TARGETPATH_01    _element_body_ptr = MAVEN_BUILD_RESOURCE_TARGETPATH
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_RESOURCE_TARGETPATH_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_resource_targetPath: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_RESOURCE_TARGETPATH_$_pinstance_count and/or MAVEN_BUILD_RESOURCE_TARGETPATH is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	targetPath
    %ifndef maven_build_resource_targetPath_documented	XML_ELEMENT_DOC = $maven_build_resource_targetPath_doc
    maven_build_resource_targetPath_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_resource_filtering := << EOF

{# maven_build_resource_filtering

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_resource_filtering: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_filtering: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_filtering: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_RESOURCE_FILTERING_01 not defined, then check for MAVEN_BUILD_RESOURCE_FILTERING:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_RESOURCE_FILTERING_01    _element_body_ptr = MAVEN_BUILD_RESOURCE_FILTERING
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_RESOURCE_FILTERING_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_resource_filtering: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_RESOURCE_FILTERING_$_pinstance_count and/or MAVEN_BUILD_RESOURCE_FILTERING is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	filtering
    %ifndef maven_build_resource_filtering_documented	XML_ELEMENT_DOC = $maven_build_resource_filtering_doc
    maven_build_resource_filtering_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_resource_directory := << EOF

{# maven_build_resource_directory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_resource_directory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_directory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_directory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_RESOURCE_DIRECTORY_01 not defined, then check for MAVEN_BUILD_RESOURCE_DIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_RESOURCE_DIRECTORY_01    _element_body_ptr = MAVEN_BUILD_RESOURCE_DIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_RESOURCE_DIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_resource_directory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_RESOURCE_DIRECTORY_$_pinstance_count and/or MAVEN_BUILD_RESOURCE_DIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	directory
    %ifndef maven_build_resource_directory_documented	XML_ELEMENT_DOC = $maven_build_resource_directory_doc
    maven_build_resource_directory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_resource_includes := << EOF

{# maven_build_resource_includes

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_resource_includes: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_includes: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_includes: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_RESOURCE_INCLUDES_01 not defined, then check for MAVEN_BUILD_RESOURCE_INCLUDES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_RESOURCE_INCLUDES_01    _element_body_ptr = MAVEN_BUILD_RESOURCE_INCLUDES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_RESOURCE_INCLUDES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_resource_includes: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_RESOURCE_INCLUDES_$_pinstance_count and/or MAVEN_BUILD_RESOURCE_INCLUDES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	includes
    %ifndef maven_build_resource_includes_documented	XML_ELEMENT_DOC = $maven_build_resource_includes_doc
    maven_build_resource_includes_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_resource_excludes := << EOF

{# maven_build_resource_excludes

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_resource_excludes: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_excludes: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_resource_excludes: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_RESOURCE_EXCLUDES_01 not defined, then check for MAVEN_BUILD_RESOURCE_EXCLUDES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_RESOURCE_EXCLUDES_01    _element_body_ptr = MAVEN_BUILD_RESOURCE_EXCLUDES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_RESOURCE_EXCLUDES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_resource_excludes: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_RESOURCE_EXCLUDES_$_pinstance_count and/or MAVEN_BUILD_RESOURCE_EXCLUDES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	excludes
    %ifndef maven_build_resource_excludes_documented	XML_ELEMENT_DOC = $maven_build_resource_excludes_doc
    maven_build_resource_excludes_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_build_resource
maven_build_resource := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_BUILD_RESOURCE_COUNT MAVEN_BUILD_RESOURCE_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_resource: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_RESOURCE_$_pinstance_count and/or MAVEN_BUILD_RESOURCE is undefined
    %ifnot $MAVEN_BUILD_RESOURCE_COUNT %return $_msg

gen_maven_build_resource_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_build_resource_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_build_resource_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_build_resource_targetPath
%call maven_build_resource_filtering
%call maven_build_resource_directory
%call maven_build_resource_includes
%call maven_build_resource_excludes

    #now generate me:
    XML_ELEMENT_NAME =	resource
    %ifndef maven_build_resource_documented	XML_ELEMENT_DOC = $maven_build_resource_doc
    maven_build_resource_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_build_resource_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_build_resource_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_build_resource_instance_count

    #generate MAVEN_BUILD_RESOURCE_COUNT element instances::
    maven_build_resource_ninstances = $MAVEN_BUILD_RESOURCE_COUNT:incr
    maven_build_resource_instance_count = 00
#%eecho maven_build_resource_ninstances=$maven_build_resource_ninstances

    %while $maven_build_resource_ninstances:decr:assign %call gen_maven_build_resource_elements
    #%call gen_maven_build_resource_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_build_resource_save_ICptr
EOF
}

{# maven_build_resources
maven_build_resources := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_BUILD_RESOURCES_COUNT MAVEN_BUILD_RESOURCES_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_resources: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_RESOURCES_$_pinstance_count and/or MAVEN_BUILD_RESOURCES is undefined
    %ifnot $MAVEN_BUILD_RESOURCES_COUNT %return $_msg

gen_maven_build_resources_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_build_resources_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_build_resources_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_build_resource

    #now generate me:
    XML_ELEMENT_NAME =	resources
    %ifndef maven_build_resources_documented	XML_ELEMENT_DOC = $maven_build_resources_doc
    maven_build_resources_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_build_resources_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_build_resources_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_build_resources_instance_count

    #generate MAVEN_BUILD_RESOURCES_COUNT element instances::
    maven_build_resources_ninstances = $MAVEN_BUILD_RESOURCES_COUNT:incr
    maven_build_resources_instance_count = 00
#%eecho maven_build_resources_ninstances=$maven_build_resources_ninstances

    %while $maven_build_resources_ninstances:decr:assign %call gen_maven_build_resources_elements
    #%call gen_maven_build_resources_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_build_resources_save_ICptr
EOF
}

maven_build_nagEmailAddress := << EOF

{# maven_build_nagEmailAddress

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_nagEmailAddress: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_nagEmailAddress: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_nagEmailAddress: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_NAGEMAILADDRESS_01 not defined, then check for MAVEN_BUILD_NAGEMAILADDRESS:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_NAGEMAILADDRESS_01    _element_body_ptr = MAVEN_BUILD_NAGEMAILADDRESS
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_NAGEMAILADDRESS_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_nagEmailAddress: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_NAGEMAILADDRESS_$_pinstance_count and/or MAVEN_BUILD_NAGEMAILADDRESS is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	nagEmailAddress
    %ifndef maven_build_nagEmailAddress_documented	XML_ELEMENT_DOC = $maven_build_nagEmailAddress_doc
    maven_build_nagEmailAddress_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_sourceDirectory := << EOF

{# maven_build_sourceDirectory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_sourceDirectory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_sourceDirectory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_sourceDirectory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_SOURCEDIRECTORY_01 not defined, then check for MAVEN_BUILD_SOURCEDIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_SOURCEDIRECTORY_01    _element_body_ptr = MAVEN_BUILD_SOURCEDIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_SOURCEDIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_sourceDirectory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_SOURCEDIRECTORY_$_pinstance_count and/or MAVEN_BUILD_SOURCEDIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	sourceDirectory
    %ifndef maven_build_sourceDirectory_documented	XML_ELEMENT_DOC = $maven_build_sourceDirectory_doc
    maven_build_sourceDirectory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_unitTestSourceDirectory := << EOF

{# maven_build_unitTestSourceDirectory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_unitTestSourceDirectory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_unitTestSourceDirectory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_unitTestSourceDirectory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_UNITTESTSOURCEDIRECTORY_01 not defined, then check for MAVEN_BUILD_UNITTESTSOURCEDIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_UNITTESTSOURCEDIRECTORY_01    _element_body_ptr = MAVEN_BUILD_UNITTESTSOURCEDIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_UNITTESTSOURCEDIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_unitTestSourceDirectory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_UNITTESTSOURCEDIRECTORY_$_pinstance_count and/or MAVEN_BUILD_UNITTESTSOURCEDIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	unitTestSourceDirectory
    %ifndef maven_build_unitTestSourceDirectory_documented	XML_ELEMENT_DOC = $maven_build_unitTestSourceDirectory_doc
    maven_build_unitTestSourceDirectory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_aspectSourceDirectory := << EOF

{# maven_build_aspectSourceDirectory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_aspectSourceDirectory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_aspectSourceDirectory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_aspectSourceDirectory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_ASPECTSOURCEDIRECTORY_01 not defined, then check for MAVEN_BUILD_ASPECTSOURCEDIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_ASPECTSOURCEDIRECTORY_01    _element_body_ptr = MAVEN_BUILD_ASPECTSOURCEDIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_ASPECTSOURCEDIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_aspectSourceDirectory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_ASPECTSOURCEDIRECTORY_$_pinstance_count and/or MAVEN_BUILD_ASPECTSOURCEDIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	aspectSourceDirectory
    %ifndef maven_build_aspectSourceDirectory_documented	XML_ELEMENT_DOC = $maven_build_aspectSourceDirectory_doc
    maven_build_aspectSourceDirectory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_integrationUnitTestSourceDirectory := << EOF

{# maven_build_integrationUnitTestSourceDirectory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_integrationUnitTestSourceDirectory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_integrationUnitTestSourceDirectory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_integrationUnitTestSourceDirectory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY_01 not defined, then check for MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY_01    _element_body_ptr = MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_integrationUnitTestSourceDirectory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY_$_pinstance_count and/or MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	integrationUnitTestSourceDirectory
    %ifndef maven_build_integrationUnitTestSourceDirectory_documented	XML_ELEMENT_DOC = $maven_build_integrationUnitTestSourceDirectory_doc
    maven_build_integrationUnitTestSourceDirectory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_build_defaultGoal := << EOF

{# maven_build_defaultGoal

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_build_defaultGoal: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_defaultGoal: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_build_defaultGoal: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_BUILD_DEFAULTGOAL_01 not defined, then check for MAVEN_BUILD_DEFAULTGOAL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_BUILD_DEFAULTGOAL_01    _element_body_ptr = MAVEN_BUILD_DEFAULTGOAL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_BUILD_DEFAULTGOAL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_build_defaultGoal: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_BUILD_DEFAULTGOAL_$_pinstance_count and/or MAVEN_BUILD_DEFAULTGOAL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	defaultGoal
    %ifndef maven_build_defaultGoal_documented	XML_ELEMENT_DOC = $maven_build_defaultGoal_doc
    maven_build_defaultGoal_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_project_build
maven_project_build := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_BUILD_COUNT MAVEN_PROJECT_BUILD_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_build: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_BUILD_$_pinstance_count and/or MAVEN_PROJECT_BUILD is undefined
    %ifnot $MAVEN_PROJECT_BUILD_COUNT %return $_msg

gen_maven_project_build_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_build_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_build_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_build_nagEmailAddress
%call maven_build_sourceDirectory
%call maven_build_unitTestSourceDirectory
%call maven_build_aspectSourceDirectory
%call maven_build_integrationUnitTestSourceDirectory
%call maven_build_sourceModifications
%call maven_build_unitTest
%call maven_build_defaultGoal
%call maven_build_resources

    #now generate me:
    XML_ELEMENT_NAME =	build
    %ifndef maven_project_build_documented	XML_ELEMENT_DOC = $maven_project_build_doc
    maven_project_build_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_build_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_build_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_build_instance_count

    #generate MAVEN_PROJECT_BUILD_COUNT element instances::
    maven_project_build_ninstances = $MAVEN_PROJECT_BUILD_COUNT:incr
    maven_project_build_instance_count = 00
#%eecho maven_project_build_ninstances=$maven_project_build_ninstances

    %while $maven_project_build_ninstances:decr:assign %call gen_maven_project_build_elements
    #%call gen_maven_project_build_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_build_save_ICptr
EOF
}

maven_dependency_id := << EOF

{# maven_dependency_id

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_dependency_id: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_id: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_id: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEPENDENCY_ID_01 not defined, then check for MAVEN_DEPENDENCY_ID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEPENDENCY_ID_01    _element_body_ptr = MAVEN_DEPENDENCY_ID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEPENDENCY_ID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency_id: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_ID_$_pinstance_count and/or MAVEN_DEPENDENCY_ID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	id
    %ifndef maven_dependency_id_documented	XML_ELEMENT_DOC = $maven_dependency_id_doc
    maven_dependency_id_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_dependency_groupId := << EOF

{# maven_dependency_groupId

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_dependency_groupId: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_groupId: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_groupId: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEPENDENCY_GROUPID_01 not defined, then check for MAVEN_DEPENDENCY_GROUPID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEPENDENCY_GROUPID_01    _element_body_ptr = MAVEN_DEPENDENCY_GROUPID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEPENDENCY_GROUPID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency_groupId: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_GROUPID_$_pinstance_count and/or MAVEN_DEPENDENCY_GROUPID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	groupId
    %ifndef maven_dependency_groupId_documented	XML_ELEMENT_DOC = $maven_dependency_groupId_doc
    maven_dependency_groupId_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_dependency_artifactId := << EOF

{# maven_dependency_artifactId

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_dependency_artifactId: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_artifactId: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_artifactId: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEPENDENCY_ARTIFACTID_01 not defined, then check for MAVEN_DEPENDENCY_ARTIFACTID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEPENDENCY_ARTIFACTID_01    _element_body_ptr = MAVEN_DEPENDENCY_ARTIFACTID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEPENDENCY_ARTIFACTID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency_artifactId: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_ARTIFACTID_$_pinstance_count and/or MAVEN_DEPENDENCY_ARTIFACTID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	artifactId
    %ifndef maven_dependency_artifactId_documented	XML_ELEMENT_DOC = $maven_dependency_artifactId_doc
    maven_dependency_artifactId_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_dependency_version := << EOF

{# maven_dependency_version

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_dependency_version: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_version: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_version: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEPENDENCY_VERSION_01 not defined, then check for MAVEN_DEPENDENCY_VERSION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEPENDENCY_VERSION_01    _element_body_ptr = MAVEN_DEPENDENCY_VERSION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEPENDENCY_VERSION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency_version: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_VERSION_$_pinstance_count and/or MAVEN_DEPENDENCY_VERSION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	version
    %ifndef maven_dependency_version_documented	XML_ELEMENT_DOC = $maven_dependency_version_doc
    maven_dependency_version_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_dependency_url := << EOF

{# maven_dependency_url

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_dependency_url: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_url: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_url: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEPENDENCY_URL_01 not defined, then check for MAVEN_DEPENDENCY_URL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEPENDENCY_URL_01    _element_body_ptr = MAVEN_DEPENDENCY_URL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEPENDENCY_URL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency_url: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_URL_$_pinstance_count and/or MAVEN_DEPENDENCY_URL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	url
    %ifndef maven_dependency_url_documented	XML_ELEMENT_DOC = $maven_dependency_url_doc
    maven_dependency_url_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_dependency_jar := << EOF

{# maven_dependency_jar

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_dependency_jar: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_jar: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_jar: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEPENDENCY_JAR_01 not defined, then check for MAVEN_DEPENDENCY_JAR:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEPENDENCY_JAR_01    _element_body_ptr = MAVEN_DEPENDENCY_JAR
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEPENDENCY_JAR_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency_jar: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_JAR_$_pinstance_count and/or MAVEN_DEPENDENCY_JAR is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	jar
    %ifndef maven_dependency_jar_documented	XML_ELEMENT_DOC = $maven_dependency_jar_doc
    maven_dependency_jar_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_dependency_type := << EOF

{# maven_dependency_type

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_dependency_type: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_type: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_type: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEPENDENCY_TYPE_01 not defined, then check for MAVEN_DEPENDENCY_TYPE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEPENDENCY_TYPE_01    _element_body_ptr = MAVEN_DEPENDENCY_TYPE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEPENDENCY_TYPE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency_type: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_TYPE_$_pinstance_count and/or MAVEN_DEPENDENCY_TYPE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	type
    %ifndef maven_dependency_type_documented	XML_ELEMENT_DOC = $maven_dependency_type_doc
    maven_dependency_type_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_dependency_properties := << EOF

{# maven_dependency_properties

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_dependency_properties: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_properties: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_dependency_properties: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_DEPENDENCY_PROPERTIES_01 not defined, then check for MAVEN_DEPENDENCY_PROPERTIES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_DEPENDENCY_PROPERTIES_01    _element_body_ptr = MAVEN_DEPENDENCY_PROPERTIES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_DEPENDENCY_PROPERTIES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency_properties: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_PROPERTIES_$_pinstance_count and/or MAVEN_DEPENDENCY_PROPERTIES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	properties
    %ifndef maven_dependency_properties_documented	XML_ELEMENT_DOC = $maven_dependency_properties_doc
    maven_dependency_properties_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_dependency
maven_dependency := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_DEPENDENCY_COUNT MAVEN_DEPENDENCY_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_dependency: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_DEPENDENCY_$_pinstance_count and/or MAVEN_DEPENDENCY is undefined
    %ifnot $MAVEN_DEPENDENCY_COUNT %return $_msg

gen_maven_dependency_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_dependency_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_dependency_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_dependency_id
%call maven_dependency_groupId
%call maven_dependency_artifactId
%call maven_dependency_version
%call maven_dependency_url
%call maven_dependency_jar
%call maven_dependency_type
%call maven_dependency_properties

    #now generate me:
    XML_ELEMENT_NAME =	dependency
    %ifndef maven_dependency_documented	XML_ELEMENT_DOC = $maven_dependency_doc
    maven_dependency_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_dependency_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_dependency_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_dependency_instance_count

    #generate MAVEN_DEPENDENCY_COUNT element instances::
    maven_dependency_ninstances = $MAVEN_DEPENDENCY_COUNT:incr
    maven_dependency_instance_count = 00
#%eecho maven_dependency_ninstances=$maven_dependency_ninstances

    %while $maven_dependency_ninstances:decr:assign %call gen_maven_dependency_elements
    #%call gen_maven_dependency_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_dependency_save_ICptr
EOF
}

{# maven_project_dependencies
maven_project_dependencies := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_DEPENDENCIES_COUNT MAVEN_PROJECT_DEPENDENCIES_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_dependencies: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_DEPENDENCIES_$_pinstance_count and/or MAVEN_PROJECT_DEPENDENCIES is undefined
    %ifnot $MAVEN_PROJECT_DEPENDENCIES_COUNT %return $_msg

gen_maven_project_dependencies_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_dependencies_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_dependencies_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_dependency

    #now generate me:
    XML_ELEMENT_NAME =	dependencies
    %ifndef maven_project_dependencies_documented	XML_ELEMENT_DOC = $maven_project_dependencies_doc
    maven_project_dependencies_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_dependencies_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_dependencies_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_dependencies_instance_count

    #generate MAVEN_PROJECT_DEPENDENCIES_COUNT element instances::
    maven_project_dependencies_ninstances = $MAVEN_PROJECT_DEPENDENCIES_COUNT:incr
    maven_project_dependencies_instance_count = 00
#%eecho maven_project_dependencies_ninstances=$maven_project_dependencies_ninstances

    %while $maven_project_dependencies_ninstances:decr:assign %call gen_maven_project_dependencies_elements
    #%call gen_maven_project_dependencies_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_dependencies_save_ICptr
EOF
}

maven_project_extend := << EOF

{# maven_project_extend

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_extend: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_extend: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_extend: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_EXTEND_01 not defined, then check for MAVEN_PROJECT_EXTEND:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_EXTEND_01    _element_body_ptr = MAVEN_PROJECT_EXTEND
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_EXTEND_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_extend: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_EXTEND_$_pinstance_count and/or MAVEN_PROJECT_EXTEND is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	extend
    %ifndef maven_project_extend_documented	XML_ELEMENT_DOC = $maven_project_extend_doc
    maven_project_extend_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_pomVersion := << EOF

{# maven_project_pomVersion

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_pomVersion: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_pomVersion: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_pomVersion: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_POMVERSION_01 not defined, then check for MAVEN_PROJECT_POMVERSION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_POMVERSION_01    _element_body_ptr = MAVEN_PROJECT_POMVERSION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_POMVERSION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_pomVersion: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_POMVERSION_$_pinstance_count and/or MAVEN_PROJECT_POMVERSION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	pomVersion
    %ifndef maven_project_pomVersion_documented	XML_ELEMENT_DOC = $maven_project_pomVersion_doc
    maven_project_pomVersion_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_id := << EOF

{# maven_project_id

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_id: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_id: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_id: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_ID_01 not defined, then check for MAVEN_PROJECT_ID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_ID_01    _element_body_ptr = MAVEN_PROJECT_ID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_ID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_id: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_ID_$_pinstance_count and/or MAVEN_PROJECT_ID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	id
    %ifndef maven_project_id_documented	XML_ELEMENT_DOC = $maven_project_id_doc
    maven_project_id_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_groupId := << EOF

{# maven_project_groupId

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_groupId: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_groupId: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_groupId: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_GROUPID_01 not defined, then check for MAVEN_PROJECT_GROUPID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_GROUPID_01    _element_body_ptr = MAVEN_PROJECT_GROUPID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_GROUPID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_groupId: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_GROUPID_$_pinstance_count and/or MAVEN_PROJECT_GROUPID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	groupId
    %ifndef maven_project_groupId_documented	XML_ELEMENT_DOC = $maven_project_groupId_doc
    maven_project_groupId_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_artifactId := << EOF

{# maven_project_artifactId

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_artifactId: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_artifactId: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_artifactId: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_ARTIFACTID_01 not defined, then check for MAVEN_PROJECT_ARTIFACTID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_ARTIFACTID_01    _element_body_ptr = MAVEN_PROJECT_ARTIFACTID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_ARTIFACTID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_artifactId: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_ARTIFACTID_$_pinstance_count and/or MAVEN_PROJECT_ARTIFACTID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	artifactId
    %ifndef maven_project_artifactId_documented	XML_ELEMENT_DOC = $maven_project_artifactId_doc
    maven_project_artifactId_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_name := << EOF

{# maven_project_name

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_name: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_name: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_name: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_NAME_01 not defined, then check for MAVEN_PROJECT_NAME:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_NAME_01    _element_body_ptr = MAVEN_PROJECT_NAME
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_NAME_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_name: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_NAME_$_pinstance_count and/or MAVEN_PROJECT_NAME is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	name
    %ifndef maven_project_name_documented	XML_ELEMENT_DOC = $maven_project_name_doc
    maven_project_name_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_currentVersion := << EOF

{# maven_project_currentVersion

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_currentVersion: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_currentVersion: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_currentVersion: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_CURRENTVERSION_01 not defined, then check for MAVEN_PROJECT_CURRENTVERSION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_CURRENTVERSION_01    _element_body_ptr = MAVEN_PROJECT_CURRENTVERSION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_CURRENTVERSION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_currentVersion: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_CURRENTVERSION_$_pinstance_count and/or MAVEN_PROJECT_CURRENTVERSION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	currentVersion
    %ifndef maven_project_currentVersion_documented	XML_ELEMENT_DOC = $maven_project_currentVersion_doc
    maven_project_currentVersion_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_shortDescription := << EOF

{# maven_project_shortDescription

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_shortDescription: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_shortDescription: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_shortDescription: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_SHORTDESCRIPTION_01 not defined, then check for MAVEN_PROJECT_SHORTDESCRIPTION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_SHORTDESCRIPTION_01    _element_body_ptr = MAVEN_PROJECT_SHORTDESCRIPTION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_SHORTDESCRIPTION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_shortDescription: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_SHORTDESCRIPTION_$_pinstance_count and/or MAVEN_PROJECT_SHORTDESCRIPTION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	shortDescription
    %ifndef maven_project_shortDescription_documented	XML_ELEMENT_DOC = $maven_project_shortDescription_doc
    maven_project_shortDescription_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_description := << EOF

{# maven_project_description

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_description: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_description: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_description: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_DESCRIPTION_01 not defined, then check for MAVEN_PROJECT_DESCRIPTION:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_DESCRIPTION_01    _element_body_ptr = MAVEN_PROJECT_DESCRIPTION
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_DESCRIPTION_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_description: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_DESCRIPTION_$_pinstance_count and/or MAVEN_PROJECT_DESCRIPTION is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	description
    %ifndef maven_project_description_documented	XML_ELEMENT_DOC = $maven_project_description_doc
    maven_project_description_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_url := << EOF

{# maven_project_url

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_url: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_url: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_url: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_URL_01 not defined, then check for MAVEN_PROJECT_URL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_URL_01    _element_body_ptr = MAVEN_PROJECT_URL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_URL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_url: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_URL_$_pinstance_count and/or MAVEN_PROJECT_URL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	url
    %ifndef maven_project_url_documented	XML_ELEMENT_DOC = $maven_project_url_doc
    maven_project_url_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_logo := << EOF

{# maven_project_logo

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_logo: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_logo: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_logo: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_LOGO_01 not defined, then check for MAVEN_PROJECT_LOGO:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_LOGO_01    _element_body_ptr = MAVEN_PROJECT_LOGO
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_LOGO_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_logo: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_LOGO_$_pinstance_count and/or MAVEN_PROJECT_LOGO is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	logo
    %ifndef maven_project_logo_documented	XML_ELEMENT_DOC = $maven_project_logo_doc
    maven_project_logo_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_issueTrackingUrl := << EOF

{# maven_project_issueTrackingUrl

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_issueTrackingUrl: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_issueTrackingUrl: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_issueTrackingUrl: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_ISSUETRACKINGURL_01 not defined, then check for MAVEN_PROJECT_ISSUETRACKINGURL:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_ISSUETRACKINGURL_01    _element_body_ptr = MAVEN_PROJECT_ISSUETRACKINGURL
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_ISSUETRACKINGURL_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_issueTrackingUrl: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_ISSUETRACKINGURL_$_pinstance_count and/or MAVEN_PROJECT_ISSUETRACKINGURL is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	issueTrackingUrl
    %ifndef maven_project_issueTrackingUrl_documented	XML_ELEMENT_DOC = $maven_project_issueTrackingUrl_doc
    maven_project_issueTrackingUrl_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_inceptionYear := << EOF

{# maven_project_inceptionYear

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_inceptionYear: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_inceptionYear: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_inceptionYear: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_INCEPTIONYEAR_01 not defined, then check for MAVEN_PROJECT_INCEPTIONYEAR:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_INCEPTIONYEAR_01    _element_body_ptr = MAVEN_PROJECT_INCEPTIONYEAR
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_INCEPTIONYEAR_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_inceptionYear: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_INCEPTIONYEAR_$_pinstance_count and/or MAVEN_PROJECT_INCEPTIONYEAR is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	inceptionYear
    %ifndef maven_project_inceptionYear_documented	XML_ELEMENT_DOC = $maven_project_inceptionYear_doc
    maven_project_inceptionYear_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_gumpRepositoryId := << EOF

{# maven_project_gumpRepositoryId

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_gumpRepositoryId: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_gumpRepositoryId: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_gumpRepositoryId: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_GUMPREPOSITORYID_01 not defined, then check for MAVEN_PROJECT_GUMPREPOSITORYID:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_GUMPREPOSITORYID_01    _element_body_ptr = MAVEN_PROJECT_GUMPREPOSITORYID
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_GUMPREPOSITORYID_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_gumpRepositoryId: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_GUMPREPOSITORYID_$_pinstance_count and/or MAVEN_PROJECT_GUMPREPOSITORYID is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	gumpRepositoryId
    %ifndef maven_project_gumpRepositoryId_documented	XML_ELEMENT_DOC = $maven_project_gumpRepositoryId_doc
    maven_project_gumpRepositoryId_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_siteAddress := << EOF

{# maven_project_siteAddress

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_siteAddress: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_siteAddress: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_siteAddress: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_SITEADDRESS_01 not defined, then check for MAVEN_PROJECT_SITEADDRESS:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_SITEADDRESS_01    _element_body_ptr = MAVEN_PROJECT_SITEADDRESS
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_SITEADDRESS_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_siteAddress: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_SITEADDRESS_$_pinstance_count and/or MAVEN_PROJECT_SITEADDRESS is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	siteAddress
    %ifndef maven_project_siteAddress_documented	XML_ELEMENT_DOC = $maven_project_siteAddress_doc
    maven_project_siteAddress_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_siteDirectory := << EOF

{# maven_project_siteDirectory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_siteDirectory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_siteDirectory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_siteDirectory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_SITEDIRECTORY_01 not defined, then check for MAVEN_PROJECT_SITEDIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_SITEDIRECTORY_01    _element_body_ptr = MAVEN_PROJECT_SITEDIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_SITEDIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_siteDirectory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_SITEDIRECTORY_$_pinstance_count and/or MAVEN_PROJECT_SITEDIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	siteDirectory
    %ifndef maven_project_siteDirectory_documented	XML_ELEMENT_DOC = $maven_project_siteDirectory_doc
    maven_project_siteDirectory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_distributionSite := << EOF

{# maven_project_distributionSite

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_distributionSite: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_distributionSite: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_distributionSite: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_DISTRIBUTIONSITE_01 not defined, then check for MAVEN_PROJECT_DISTRIBUTIONSITE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_DISTRIBUTIONSITE_01    _element_body_ptr = MAVEN_PROJECT_DISTRIBUTIONSITE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_DISTRIBUTIONSITE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_distributionSite: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_DISTRIBUTIONSITE_$_pinstance_count and/or MAVEN_PROJECT_DISTRIBUTIONSITE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	distributionSite
    %ifndef maven_project_distributionSite_documented	XML_ELEMENT_DOC = $maven_project_distributionSite_doc
    maven_project_distributionSite_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_distributionDirectory := << EOF

{# maven_project_distributionDirectory

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_distributionDirectory: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_distributionDirectory: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_distributionDirectory: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_DISTRIBUTIONDIRECTORY_01 not defined, then check for MAVEN_PROJECT_DISTRIBUTIONDIRECTORY:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_DISTRIBUTIONDIRECTORY_01    _element_body_ptr = MAVEN_PROJECT_DISTRIBUTIONDIRECTORY
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_DISTRIBUTIONDIRECTORY_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_distributionDirectory: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_DISTRIBUTIONDIRECTORY_$_pinstance_count and/or MAVEN_PROJECT_DISTRIBUTIONDIRECTORY is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	distributionDirectory
    %ifndef maven_project_distributionDirectory_documented	XML_ELEMENT_DOC = $maven_project_distributionDirectory_doc
    maven_project_distributionDirectory_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_reports := << EOF

{# maven_project_reports

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_reports: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_reports: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_reports: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_REPORTS_01 not defined, then check for MAVEN_PROJECT_REPORTS:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_REPORTS_01    _element_body_ptr = MAVEN_PROJECT_REPORTS
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_REPORTS_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_reports: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_REPORTS_$_pinstance_count and/or MAVEN_PROJECT_REPORTS is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	reports
    %ifndef maven_project_reports_documented	XML_ELEMENT_DOC = $maven_project_reports_doc
    maven_project_reports_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_properties := << EOF

{# maven_project_properties

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_properties: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_properties: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_properties: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_PROPERTIES_01 not defined, then check for MAVEN_PROJECT_PROPERTIES:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_PROPERTIES_01    _element_body_ptr = MAVEN_PROJECT_PROPERTIES
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_PROPERTIES_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_properties: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_PROPERTIES_$_pinstance_count and/or MAVEN_PROJECT_PROPERTIES is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	properties
    %ifndef maven_project_properties_documented	XML_ELEMENT_DOC = $maven_project_properties_doc
    maven_project_properties_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

maven_project_package := << EOF

{# maven_project_package

    #get element count of parent so I know which input variable to look for.
    %ifndef $parent_instance_count_ptr %exit maven_project_package: ERROR: parent_instance_count_ptr contents UNDEFINED

    _pinstance_count = $parent_instance_count_ptr:valueof

    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_package: parent_instance_count_ptr=$parent_instance_count_ptr
    %ifdef GEN_MAVEN_LIB_DEBUG %eecho maven_project_package: _pinstance_count=$_pinstance_count

    #set up element body input parameter name, based on parent instance count:

    #if first instance, and MAVEN_PROJECT_PACKAGE_01 not defined, then check for MAVEN_PROJECT_PACKAGE:
    %undef _element_body_ptr
    %ifnot  $_pinstance_count:minus1 %ifndef MAVEN_PROJECT_PACKAGE_01    _element_body_ptr = MAVEN_PROJECT_PACKAGE
    %ifndef _element_body_ptr     _element_body_ptr = MAVEN_PROJECT_PACKAGE_$_pinstance_count

    #now check the contents:
    %undef XML_ELEMENT_BODY
    %ifdef  $_element_body_ptr    XML_ELEMENT_BODY = $_element_body_ptr:valueof
    %ifndef $_element_body_ptr %if $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS    XML_ELEMENT_BODY =

    #finally, return if we are not generating empty elements
    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project_package: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_PACKAGE_$_pinstance_count and/or MAVEN_PROJECT_PACKAGE is undefined

    %ifndef XML_ELEMENT_BODY %return $_msg

    XML_ELEMENT_NAME =	package
    %ifndef maven_project_package_documented	XML_ELEMENT_DOC = $maven_project_package_doc
    maven_project_package_documented =	true

    %call xml_line_element

    %undef _pmacro_name
    %undef _pinstance_count
}
EOF

{# maven_project
maven_project := << EOF

    #did user specify a count for this element?
    %ifndef MAVEN_PROJECT_COUNT MAVEN_PROJECT_COUNT = $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS

    _msg =
    %ifdef MAVEN_LIB_VERBOSE _msg = maven_project: not generating because MAVEN_LIB_GENERATE_EMPTY_ELEMENTS is $MAVEN_LIB_GENERATE_EMPTY_ELEMENTS and MAVEN_PROJECT_$_pinstance_count and/or MAVEN_PROJECT is undefined
    %ifnot $MAVEN_PROJECT_COUNT %return $_msg

gen_maven_project_elements := << EOFLOOP
    #increment instance count:
    $parent_instance_count_ptr = $parent_instance_count_ptr:valueof:incr

    #save the current output accumulator variable name:
    _maven_project_save_accumulator = $MACRO_OUTPUT_ACCUMULATOR

    #re-assign to temporary accumulator to pick up kids:
    MACRO_OUTPUT_ACCUMULATOR = _maven_project_kid_accumulator
    #clear the kid accumulator:
    $MACRO_OUTPUT_ACCUMULATOR =

    #make calls to generate my kid elements:
    
%call maven_project_extend
%call maven_project_pomVersion
%call maven_project_id
%call maven_project_groupId
%call maven_project_artifactId
%call maven_project_name
%call maven_project_currentVersion
%call maven_project_shortDescription
%call maven_project_description
%call maven_project_url
%call maven_project_logo
%call maven_project_issueTrackingUrl
%call maven_project_inceptionYear
%call maven_project_gumpRepositoryId
%call maven_project_siteAddress
%call maven_project_siteDirectory
%call maven_project_distributionSite
%call maven_project_distributionDirectory
%call maven_project_mailingLists
%call maven_project_developers
%call maven_project_contributors
%call maven_project_licenses
%call maven_project_versions
%call maven_project_branches
%call maven_project_packageGroups
%call maven_project_reports
%call maven_project_repository
%call maven_project_organization
%call maven_project_properties
%call maven_project_package
%call maven_project_build
%call maven_project_dependencies

    #now generate me:
    XML_ELEMENT_NAME =	project
    %ifndef maven_project_documented	XML_ELEMENT_DOC = $maven_project_doc
    maven_project_documented =	true

    #the kids are our body:
    XML_ELEMENT_BODY =	$MACRO_OUTPUT_ACCUMULATOR:valueof
    #restore the output accumulator varaible name:
    MACRO_OUTPUT_ACCUMULATOR	= $_maven_project_save_accumulator

    %call xml_nested_element
EOFLOOP

    #save my parent's instance count variable:
    maven_project_save_ICptr = $parent_instance_count_ptr
    parent_instance_count_ptr = maven_project_instance_count

    #generate MAVEN_PROJECT_COUNT element instances::
    maven_project_ninstances = $MAVEN_PROJECT_COUNT:incr
    maven_project_instance_count = 00
#%eecho maven_project_ninstances=$maven_project_ninstances

    %while $maven_project_ninstances:decr:assign %call gen_maven_project_elements
    #%call gen_maven_project_elements

    #restore my parent's instance count variable:
    parent_instance_count_ptr = $maven_project_save_ICptr
EOF
}

{
show_maven_user_vars := << EOF

#create list of variables to show
maven_user_vars := << EOF2
#############
#non-terminal elements:
#NOTE:  here is where you specify how many elements to generate for a repeating
#       non-terminal element.  For example, if you have 2 developers, specify:
# MAVEN_PROJECT_DEVELOPERS_COUNT = 1
# MAVEN_DEVELOPER_COUNT = 2
#############
MAVEN_MAILINGLIST_COUNT = 1
MAVEN_PROJECT_MAILINGLISTS_COUNT = 1
MAVEN_DEVELOPER_COUNT = 1
MAVEN_PROJECT_DEVELOPERS_COUNT = 1
MAVEN_CONTRIBUTOR_COUNT = 1
MAVEN_PROJECT_CONTRIBUTORS_COUNT = 1
MAVEN_LICENSE_COUNT = 1
MAVEN_PROJECT_LICENSES_COUNT = 1
MAVEN_VERSION_COUNT = 1
MAVEN_PROJECT_VERSIONS_COUNT = 1
MAVEN_BRANCH_COUNT = 1
MAVEN_PROJECT_BRANCHES_COUNT = 1
MAVEN_PACKAGEGROUP_COUNT = 1
MAVEN_PROJECT_PACKAGEGROUPS_COUNT = 1
MAVEN_PROJECT_REPOSITORY_COUNT = 1
MAVEN_PROJECT_ORGANIZATION_COUNT = 1
MAVEN_SOURCEMODIFICATION_COUNT = 1
MAVEN_BUILD_SOURCEMODIFICATIONS_COUNT = 1
MAVEN_UNITTEST_RESOURCE_COUNT = 1
MAVEN_UNITTEST_RESOURCES_COUNT = 1
MAVEN_BUILD_UNITTEST_COUNT = 1
MAVEN_BUILD_RESOURCE_COUNT = 1
MAVEN_BUILD_RESOURCES_COUNT = 1
MAVEN_PROJECT_BUILD_COUNT = 1
MAVEN_DEPENDENCY_COUNT = 1
MAVEN_PROJECT_DEPENDENCIES_COUNT = 1
MAVEN_PROJECT_COUNT = 1

#########
#terminal elements:
#
#NOTE:  if a terminal's parent has multiple instances,
#       then specifiy instance number.  For example:
#
# MAVEN_DEVELOPER_ID_01 = fred
# MAVEN_DEVELOPER_NAME_01 = Fred Foo
# ...
#
# MAVEN_DEVELOPER_ID_02 = bob
# MAVEN_DEVELOPER_NAME_02 = Bob Fu
# ...
#
# IFF there is only one element value, you can drop the _01, for example:
# MAVEN_PROJECT_POMVERSION = 3
#     is the same as:
# MAVEN_PROJECT_POMVERSION_01 = 3
#
# IFF there are multiple sub-instance elements, then you specify:
# e_01_01
# e_01_02
# ...
# However, at the current time, maven contains no such structures.
#########
MAVEN_MAILINGLIST_NAME =
MAVEN_MAILINGLIST_SUBSCRIBE =
MAVEN_MAILINGLIST_UNSUBSCRIBE =
MAVEN_MAILINGLIST_POST =
MAVEN_MAILINGLIST_ARCHIVE =
MAVEN_MAILINGLIST_OTHERARCHIVES =
MAVEN_DEVELOPER_ID =
MAVEN_DEVELOPER_NAME =
MAVEN_DEVELOPER_EMAIL =
MAVEN_DEVELOPER_URL =
MAVEN_DEVELOPER_ORGANIZATION =
MAVEN_DEVELOPER_ORGANIZATIONURL =
MAVEN_DEVELOPER_ROLES =
MAVEN_DEVELOPER_TIMEZONE =
MAVEN_DEVELOPER_PROPERTIES =
MAVEN_CONTRIBUTOR_NAME =
MAVEN_CONTRIBUTOR_EMAIL =
MAVEN_CONTRIBUTOR_URL =
MAVEN_CONTRIBUTOR_ORGANIZATION =
MAVEN_CONTRIBUTOR_ORGANIZATIONURL =
MAVEN_CONTRIBUTOR_ROLES =
MAVEN_CONTRIBUTOR_TIMEZONE =
MAVEN_CONTRIBUTOR_PROPERTIES =
MAVEN_LICENSE_NAME =
MAVEN_LICENSE_URL =
MAVEN_LICENSE_DISTRIBUTION =
MAVEN_LICENSE_COMMENTS =
MAVEN_VERSION_NAME =
MAVEN_VERSION_TAG =
MAVEN_VERSION_ID =
MAVEN_BRANCH_TAG =
MAVEN_PACKAGEGROUP_TITLE =
MAVEN_PACKAGEGROUP_PACKAGES =
MAVEN_REPOSITORY_CONNECTION =
MAVEN_REPOSITORY_DEVELOPERCONNECTION =
MAVEN_REPOSITORY_URL =
MAVEN_ORGANIZATION_NAME =
MAVEN_ORGANIZATION_URL =
MAVEN_ORGANIZATION_LOGO =
MAVEN_SOURCEMODIFICATION_CLASSNAME =
MAVEN_SOURCEMODIFICATION_PROPERTY =
MAVEN_SOURCEMODIFICATION_DIRECTORY =
MAVEN_SOURCEMODIFICATION_INCLUDES =
MAVEN_SOURCEMODIFICATION_EXCLUDES =
MAVEN_UNITTEST_RESOURCE_TARGETPATH =
MAVEN_UNITTEST_RESOURCE_FILTERING =
MAVEN_UNITTEST_RESOURCE_DIRECTORY =
MAVEN_UNITTEST_RESOURCE_INCLUDES =
MAVEN_UNITTEST_RESOURCE_EXCLUDES =
MAVEN_UNITTEST_INCLUDES =
MAVEN_UNITTEST_EXCLUDES =
MAVEN_BUILD_RESOURCE_TARGETPATH =
MAVEN_BUILD_RESOURCE_FILTERING =
MAVEN_BUILD_RESOURCE_DIRECTORY =
MAVEN_BUILD_RESOURCE_INCLUDES =
MAVEN_BUILD_RESOURCE_EXCLUDES =
MAVEN_BUILD_NAGEMAILADDRESS =
MAVEN_BUILD_SOURCEDIRECTORY =
MAVEN_BUILD_UNITTESTSOURCEDIRECTORY =
MAVEN_BUILD_ASPECTSOURCEDIRECTORY =
MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY =
MAVEN_BUILD_DEFAULTGOAL =
MAVEN_DEPENDENCY_ID =
MAVEN_DEPENDENCY_GROUPID =
MAVEN_DEPENDENCY_ARTIFACTID =
MAVEN_DEPENDENCY_VERSION =
MAVEN_DEPENDENCY_URL =
MAVEN_DEPENDENCY_JAR =
MAVEN_DEPENDENCY_TYPE =
MAVEN_DEPENDENCY_PROPERTIES =
MAVEN_PROJECT_EXTEND =
MAVEN_PROJECT_POMVERSION =
MAVEN_PROJECT_ID =
MAVEN_PROJECT_GROUPID =
MAVEN_PROJECT_ARTIFACTID =
MAVEN_PROJECT_NAME =
MAVEN_PROJECT_CURRENTVERSION =
MAVEN_PROJECT_SHORTDESCRIPTION =
MAVEN_PROJECT_DESCRIPTION =
MAVEN_PROJECT_URL =
MAVEN_PROJECT_LOGO =
MAVEN_PROJECT_ISSUETRACKINGURL =
MAVEN_PROJECT_INCEPTIONYEAR =
MAVEN_PROJECT_GUMPREPOSITORYID =
MAVEN_PROJECT_SITEADDRESS =
MAVEN_PROJECT_SITEDIRECTORY =
MAVEN_PROJECT_DISTRIBUTIONSITE =
MAVEN_PROJECT_DISTRIBUTIONDIRECTORY =
MAVEN_PROJECT_REPORTS =
MAVEN_PROJECT_PROPERTIES =
MAVEN_PROJECT_PACKAGE =
EOF2

#show them:
%echo -n $maven_user_vars
EOF
}
{
maven_lib_reset := << EOF
%undef MAVEN_MAILINGLIST(_.*)?
%undef MAVEN_PROJECT_MAILINGLISTS(_.*)?
%undef MAVEN_DEVELOPER(_.*)?
%undef MAVEN_PROJECT_DEVELOPERS(_.*)?
%undef MAVEN_CONTRIBUTOR(_.*)?
%undef MAVEN_PROJECT_CONTRIBUTORS(_.*)?
%undef MAVEN_LICENSE(_.*)?
%undef MAVEN_PROJECT_LICENSES(_.*)?
%undef MAVEN_VERSION(_.*)?
%undef MAVEN_PROJECT_VERSIONS(_.*)?
%undef MAVEN_BRANCH(_.*)?
%undef MAVEN_PROJECT_BRANCHES(_.*)?
%undef MAVEN_PACKAGEGROUP(_.*)?
%undef MAVEN_PROJECT_PACKAGEGROUPS(_.*)?
%undef MAVEN_PROJECT_REPOSITORY(_.*)?
%undef MAVEN_PROJECT_ORGANIZATION(_.*)?
%undef MAVEN_SOURCEMODIFICATION(_.*)?
%undef MAVEN_BUILD_SOURCEMODIFICATIONS(_.*)?
%undef MAVEN_UNITTEST_RESOURCE(_.*)?
%undef MAVEN_UNITTEST_RESOURCES(_.*)?
%undef MAVEN_BUILD_UNITTEST(_.*)?
%undef MAVEN_BUILD_RESOURCE(_.*)?
%undef MAVEN_BUILD_RESOURCES(_.*)?
%undef MAVEN_PROJECT_BUILD(_.*)?
%undef MAVEN_DEPENDENCY(_.*)?
%undef MAVEN_PROJECT_DEPENDENCIES(_.*)?
%undef MAVEN_PROJECT(_.*)?
%undef MAVEN_MAILINGLIST_NAME(_.*)?
%undef MAVEN_MAILINGLIST_SUBSCRIBE(_.*)?
%undef MAVEN_MAILINGLIST_UNSUBSCRIBE(_.*)?
%undef MAVEN_MAILINGLIST_POST(_.*)?
%undef MAVEN_MAILINGLIST_ARCHIVE(_.*)?
%undef MAVEN_MAILINGLIST_OTHERARCHIVES(_.*)?
%undef MAVEN_DEVELOPER_ID(_.*)?
%undef MAVEN_DEVELOPER_NAME(_.*)?
%undef MAVEN_DEVELOPER_EMAIL(_.*)?
%undef MAVEN_DEVELOPER_URL(_.*)?
%undef MAVEN_DEVELOPER_ORGANIZATION(_.*)?
%undef MAVEN_DEVELOPER_ORGANIZATIONURL(_.*)?
%undef MAVEN_DEVELOPER_ROLES(_.*)?
%undef MAVEN_DEVELOPER_TIMEZONE(_.*)?
%undef MAVEN_DEVELOPER_PROPERTIES(_.*)?
%undef MAVEN_CONTRIBUTOR_NAME(_.*)?
%undef MAVEN_CONTRIBUTOR_EMAIL(_.*)?
%undef MAVEN_CONTRIBUTOR_URL(_.*)?
%undef MAVEN_CONTRIBUTOR_ORGANIZATION(_.*)?
%undef MAVEN_CONTRIBUTOR_ORGANIZATIONURL(_.*)?
%undef MAVEN_CONTRIBUTOR_ROLES(_.*)?
%undef MAVEN_CONTRIBUTOR_TIMEZONE(_.*)?
%undef MAVEN_CONTRIBUTOR_PROPERTIES(_.*)?
%undef MAVEN_LICENSE_NAME(_.*)?
%undef MAVEN_LICENSE_URL(_.*)?
%undef MAVEN_LICENSE_DISTRIBUTION(_.*)?
%undef MAVEN_LICENSE_COMMENTS(_.*)?
%undef MAVEN_VERSION_NAME(_.*)?
%undef MAVEN_VERSION_TAG(_.*)?
%undef MAVEN_VERSION_ID(_.*)?
%undef MAVEN_BRANCH_TAG(_.*)?
%undef MAVEN_PACKAGEGROUP_TITLE(_.*)?
%undef MAVEN_PACKAGEGROUP_PACKAGES(_.*)?
%undef MAVEN_REPOSITORY_CONNECTION(_.*)?
%undef MAVEN_REPOSITORY_DEVELOPERCONNECTION(_.*)?
%undef MAVEN_REPOSITORY_URL(_.*)?
%undef MAVEN_ORGANIZATION_NAME(_.*)?
%undef MAVEN_ORGANIZATION_URL(_.*)?
%undef MAVEN_ORGANIZATION_LOGO(_.*)?
%undef MAVEN_SOURCEMODIFICATION_CLASSNAME(_.*)?
%undef MAVEN_SOURCEMODIFICATION_PROPERTY(_.*)?
%undef MAVEN_SOURCEMODIFICATION_DIRECTORY(_.*)?
%undef MAVEN_SOURCEMODIFICATION_INCLUDES(_.*)?
%undef MAVEN_SOURCEMODIFICATION_EXCLUDES(_.*)?
%undef MAVEN_UNITTEST_RESOURCE_TARGETPATH(_.*)?
%undef MAVEN_UNITTEST_RESOURCE_FILTERING(_.*)?
%undef MAVEN_UNITTEST_RESOURCE_DIRECTORY(_.*)?
%undef MAVEN_UNITTEST_RESOURCE_INCLUDES(_.*)?
%undef MAVEN_UNITTEST_RESOURCE_EXCLUDES(_.*)?
%undef MAVEN_UNITTEST_INCLUDES(_.*)?
%undef MAVEN_UNITTEST_EXCLUDES(_.*)?
%undef MAVEN_BUILD_RESOURCE_TARGETPATH(_.*)?
%undef MAVEN_BUILD_RESOURCE_FILTERING(_.*)?
%undef MAVEN_BUILD_RESOURCE_DIRECTORY(_.*)?
%undef MAVEN_BUILD_RESOURCE_INCLUDES(_.*)?
%undef MAVEN_BUILD_RESOURCE_EXCLUDES(_.*)?
%undef MAVEN_BUILD_NAGEMAILADDRESS(_.*)?
%undef MAVEN_BUILD_SOURCEDIRECTORY(_.*)?
%undef MAVEN_BUILD_UNITTESTSOURCEDIRECTORY(_.*)?
%undef MAVEN_BUILD_ASPECTSOURCEDIRECTORY(_.*)?
%undef MAVEN_BUILD_INTEGRATIONUNITTESTSOURCEDIRECTORY(_.*)?
%undef MAVEN_BUILD_DEFAULTGOAL(_.*)?
%undef MAVEN_DEPENDENCY_ID(_.*)?
%undef MAVEN_DEPENDENCY_GROUPID(_.*)?
%undef MAVEN_DEPENDENCY_ARTIFACTID(_.*)?
%undef MAVEN_DEPENDENCY_VERSION(_.*)?
%undef MAVEN_DEPENDENCY_URL(_.*)?
%undef MAVEN_DEPENDENCY_JAR(_.*)?
%undef MAVEN_DEPENDENCY_TYPE(_.*)?
%undef MAVEN_DEPENDENCY_PROPERTIES(_.*)?
%undef MAVEN_PROJECT_EXTEND(_.*)?
%undef MAVEN_PROJECT_POMVERSION(_.*)?
%undef MAVEN_PROJECT_ID(_.*)?
%undef MAVEN_PROJECT_GROUPID(_.*)?
%undef MAVEN_PROJECT_ARTIFACTID(_.*)?
%undef MAVEN_PROJECT_NAME(_.*)?
%undef MAVEN_PROJECT_CURRENTVERSION(_.*)?
%undef MAVEN_PROJECT_SHORTDESCRIPTION(_.*)?
%undef MAVEN_PROJECT_DESCRIPTION(_.*)?
%undef MAVEN_PROJECT_URL(_.*)?
%undef MAVEN_PROJECT_LOGO(_.*)?
%undef MAVEN_PROJECT_ISSUETRACKINGURL(_.*)?
%undef MAVEN_PROJECT_INCEPTIONYEAR(_.*)?
%undef MAVEN_PROJECT_GUMPREPOSITORYID(_.*)?
%undef MAVEN_PROJECT_SITEADDRESS(_.*)?
%undef MAVEN_PROJECT_SITEDIRECTORY(_.*)?
%undef MAVEN_PROJECT_DISTRIBUTIONSITE(_.*)?
%undef MAVEN_PROJECT_DISTRIBUTIONDIRECTORY(_.*)?
%undef MAVEN_PROJECT_REPORTS(_.*)?
%undef MAVEN_PROJECT_PROPERTIES(_.*)?
%undef MAVEN_PROJECT_PACKAGE(_.*)?

#default POM version:
MAVEN_PROJECT_POMVERSION = 3

#always generate the <project> element:
MAVEN_PROJECT_COUNT = 1
EOF
}
#avoid multiple includes:
MAVEN_POM_GENERATOR_INCLUDED = 1
 