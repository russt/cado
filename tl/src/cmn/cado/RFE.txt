Requests for Enhancements to codegen

*******************
*     PENDING     *
*******************

-------------------
21-Sep-2013 (russt)

o interpret numeric suffix after :eq, :ne, like :plus<n>, :minus<n> ops.

    %if $foo:eq0 ...
    %if $foo:ne1 ...
    %if $foo:eq1000742 ...

  This would allow us to avoid setting CG_COMPARE_SPEC for trivial numeric compares.
  Another approach would to be to have hardcode ops only for 0, :eq0, :ne0, etc., since
  this covers simple boolean ops.

  I noticed that :eq & friends return null string or 1, but not sure why.  Here is the code:
    return ($var == $spec) if (&is_number($var) && &is_number($spec));
    return ($var eq $spec);
  I think it should return an explicit zero or one.  Bug?  Or is it because of the logic in
  %if, %ifdef?  I remember that match *does* return explicit 0.  Note this comment:

    #  04-Aug-2005 (russt) [Version 1.41]
    #       changed semantics of %if, %ifnot:  false <==> zero or empty string, true <==> !false

  Which indicates that :eq could return 0 instead of "".  note also that I added :eq ops a few days later:

    #  11-Aug-2005 (russt) [Version 1.42]
    #       add match, compare operators:
    #           :eq, :ne, :gt, :lt, :ge, :le - will compare against CG_COMPARE_SPEC

-------------------
09-Sep-2013 (russt)

o add -<integer> (e.g., -2) to %echo and %eecho.  prepend that many empty lines before message.
  perhaps %echo -1,1  would prepend one line, and append one line.
  I.e., %echo -1 <=> %echo -1,0
o incorporate %bldmsg as native statement.  (or perhaps %msg).

-------------------
30-Sep-2008 (russt)

o add doc for %return, %halt, %exit, and STATUS variables
o add :hastabs  operator (true if a string contains tab characters).

-------------------
30-May-2008 (russt)

o should codegen search for input program using CG_TEMPLATE_PATH?

  This would be handy to run examples:

      codegen sample2.cg

  It could be confusing, however.

  Perhaps add a flag to allow this, but default would be to look for relative filename.

o add %pragma echo_leading_space to preserve leading space in %echo statements.

  This would make up for the fact that we have no quoting mechanism for echo strings.

  Currently, you have to add a non-whitespace char to align output, e.g.:

      %echo .    some string

  Workaround:  use PAD_SPEC, and then:

      %echo $msg:pad

  still have to create $msg, however, or could have a special $ECHO_PAD_SPEC.

-------------------
05-Apr-2006 (russt)

add :eval postfix op that will execute the contents of a var as if it was written
to a file and then included.

for example:

    foo=bldhost -versionproperties
    foo=$foo:sh:eval

would result in some new variables defined:

    %echo SHORT_PRODUCT_NAME=$SHORT_PRODUCT_NAME
..
etc.

I suppose we could return the status of the eval as the result of the
assignment.  I.e., in the above example, $foo would be empty or contain
an error message from codegen.

This is exactly equivalent to:

    ECHO_TXT=bldhost -versionproperties
    ECHO_TXT=$ECHO_TXT:sh
    echo foofile
    %include foofile
    %echo SHORT_PRODUCT_NAME=$SHORT_PRODUCT_NAME
    ...

A different way, that would allow either a variable,
or a pointer to variable, to be evaluated:

    foo=bldhost -versionproperties
    foo=$foo:sh
    foo2=foo

    %inline foo
and
    %inline $foo2

would be equivalent.  This would allow me to pass variables
around that could be inlined by other macros.
-------------------
26-Aug-2005 (russt)

- Need to clarify the semantics of "undef".
  in particular, if the :env operator for a var is undefined, then
  shouldn't I return an undefined value?

  This would mean modifying assignments so that lhs = rhs could assign "undef"
  to lhs if rhs is undefined.  This is similar to the perl "undef", and it would
  be exactly equivalent to "%undef lhs".  However, in the case of codegen, I cannot
  add a keywork or function for the rhs, so in summary, there perhaps to be 3 ways
  to get a variable undefined:

  1.  %undef var
  2.  var = <undefined expression>
  3.  var = $var:undef

Q:  when I say "%echo $var:undef", what should it display?
A:  I think perhaps it should display ${var:undef} instead of ${var} as it does now.

Q:  should  $var:env imply $var:nameof:env?
A:  this is less useful, since $var:op1:op2: ... :op3:env could be an interesting
    calculation.

Q:  should  I allow uninitialized variables on lhs to participate in certain
    postfix expressions?

    I.e., what should be the result of:

        %echo $SRCROOT:nameof:env

    Currently it displays "SRCROOT", as does $SRCROOT:nameof:assign:env,
    but perhaps it should return the contents of $ENV{'SRCROOT'} (or undefined).
    [NOTE:  this was a bug introduced with :undef op; fixed in version 1.45]

-------------------
17-Aug-2005 (russt)

- Add extension mechanism for post-fix operators; i.e., add
  %extend statement, that adds a user-defined perl library
  to implement new operators.  PRE-REQ: call postfix ops thru hash.

-------------------
12-Aug-2005 (russt)

- Add %showvars statement - this will dump current symbol table

-------------------

*******************
*   IMPLEMENTED   *
*******************

-------------------
23-Aug-2005 (russt)

- In file-spec, allow binary files on LHS.  copy unmolested.
  (IMPLEMENTED in version 1.45 8/29/05)

-------------------
22-Aug-2005 (russt) [Version 1.44]

- Add -Dvar[=value] command line arg
  (IMPLEMENTED in version 1.44 8/22/05)

-------------------
12-Aug-2005 (russt)

- Add %shift statement 
  (IMPLEMENTED on 8/12/05).

BUG FIXES:

- need to escape '%' characters that we get in the input before passing to sprintf.
  (IMPLEMENTED on 8/12/05)
- need to ignore leading space on file-spec lines.
  (IMPLEMENTED on 8/12/05)

-------------------
11-Aug-2005 (russt)

Internal code clean-up/refactoring:

- call postfix ops thru hash to improve performance
- run messages thru standard interface (&err, &warn) to make them more consistent
- keep track of macro names for tracing.

-------------------
07-Aug-2005 (russt)

Pass un-used arguments to codegen.  I.e.:

    % codegen cat.cg somefile

    would set     $CG_ARGV_COUNT to 1
    and would set $CG_ARGV_1 to "somefile"

IMPLEMENTED in version 1.43 8/20/05 (as stack var, no CG_ARGV_COUNT)

-------------------
07-Aug-2005 (russt)

Improve test infrastructure.

- convert more tests to use conditional expressions to detect pass/fail
- Write script to run all tests.
- move tests to regress subdir.
- some tests may need reference files
- some tests (testh.cg) now require stdin.

-------------------
07-Aug-2005 (russt)

Add %push, %pop statements. These are modeled after the perl statements:

    perl (2)> push @foo, "a";
     -> 1
    perl (3)> print @foo;
    a -> 1
    perl (4)> push @foo, "b";
     -> 2
    perl (5)> print @foo
    ab -> 1
    #last-in, first-out:
    perl (6)> pop @foo;
     -> b

Codegen version:

    %push foovar <expr>

is equivalent to:

    foovar = $foovar${FS}<expr>

where $FS is some internal field separator.

IMPLEMENTED in version 1.42
-------------------
