
                    =========================
                    Cado Quick Reference
                    Version {=VERSION=}, {=VERSION_DATE=}
                    =========================

{
                    ===============
                    FILE GENERATION
                    ===============

                    o all files are generated relative to CG_ROOT.
                    o templates are looked up in CG_TEMPLATE_PATH, except for symlink directive.

template  com.foo   - generate a java class hierarchy from template file.
template /a.txt     - generate a plain file (no java).
template >> afile   - append expansion of template to "afile".
afile <- alink      - create "alink" file pointing to "afile", which doesn't have to exist.

                    ==========================
                    ASSIGNMENT, INITIALIZATION
                    ==========================
:assign, :a         - assign current value of variable to the named variable
                      see also:  '=', ':=' assignment statements.
:append             - append contents of a variable to itself
                      see also:  '.=' assignment operator.
:insert             - prepend contents of a variable to itself
:nameof             - substitute the name of the variable
:undef              - return undefined value
:valueof            - return the value of a variable
:zero               - set a variable to zero.
:clr                - set a variable to empty string.
:clrifndef          - clear variable if it is undefined (see also:  %pragma clrifndef)

                    ================
                    SYSTEM OPERATORS
                    ================
:env                - return value of an environment variable, or empty string if not defined.
                      Example: $HOME = $HOME:nameof:env
                      will set $HOME to the vaule of the environment $HOME.
                      Note that $HOME:undef:env <==> $HOME:nameof:env, i.e., if variable is
                      undefined then its name will be used.
:pwd                - return the current working directory.

                    =================
                    NUMERIC OPERATORS
                    =================
:decr               - decrement by 1, preserving zero-fill.  e.g., 3 2 1 or 03 02 01.
:incr, :i           - increment by 1, preserving zero-fill.

:isint              - returns 1 if <val> is a positive integer, else zero.
:pad                - pad a number or string as specified by sprintf CG_PAD_SPEC

:plus<n>            - add <n> to variable. maintains pad setting.  :plus1 <=> :incr
                      see also:  '+=' assignment statement (no pad).
:minus<n>           - subtract <n> from variable. maintains pad setting.  :minus1 <=> :decr
                      see also:  '-=' assignment statement (no pad).
:times<n>           - multiply variable times <n>.
                      see also:  '*=' assignment statement (no pad).
:div<n>             - divide variable by <n> (integer division).
                      see also:  '/=' assignment statement (no pad).
:rem<n>             - modulo <n> of varible, i.e., $foo:rem2 <=> ($foo % 2).
                      see also:  '%=' assignment statement (no pad).

                    =============
                    XML OPERATORS
                    =============
:xmlcomment         - wrap $var in xml comment:
:xmlcommentblock    - wrap $var in multi-line xml comment: #wrap the input string in an xml comment
:_<element_name>    - wrap $var in <element_name>, adding CG_ATTRIBUTE_<element_name> attributes, if defined.
:stripxmlcomments   - strip xml comments from input

                    ================
                    STRING OPERATORS
                    ================
:indent<n>          - indent each line (<n> x CG_INDENT_STRING) levels. example $foo:indent2
:basename           - return basename of input var
:dirname            - return dirname of input var
:suffix             - return suffix of input var
:root               - return root (var without suffix) of input var

:cap                - this op capitalizes the first letter of a string.
:uncap              - uncapitalize the first letter of a string.

:onecol             - split lines on whitespace, resulting in a single column of data.
:oneline            - replace \s*EOL\s* sequences with a single space, and trim result.
                      (mashes multi-line input to one line).

:lnewline           - insert leading (left) newline iff non-empty string.
:rnewline           - append trailing (right) newline iff non-empty string.
:newline, :nl       - append trailing newline unconditionally.
:fixeol             - force at most one newline at the end of the string.
:eoltrim            - trim whitespace preceding newlines.
:eolsqueeze         - compress multiple empty lines into a single empty line.

:ltrim              - trim leading whitespace (tabs, spaces, and newlines).
:rtrim              - trim trailing whitespace.
:trim               - trim lead and trailing whitespace.

:substitute         - apply substitute pattern specified by $CG_SUBSTITUTE_SPEC
:s                  - alias for :substitute
:s2,:s3,:s4,:s5     - apply substitute pattern specified by $CG_SUBSTITUTE_SPEC<n>, for n: {2..5}
:substituteliteral  - apply substitute specified by $CG_SUBSTITUTE_SPEC, ignoring meta-characters.
                      For example:
                          CG_SUBSTITUTE_SPEC = s/.*(foo)/bloop/g
                          somevar = $somevar:substituteliteral
                      will change all literal occurances of the string '.*(foo)' in the input to 'bloop'.
                      Note:  g is currently the only modifier allowed.
:sl                 - alias for :substituteliteral

:lspace             - add one leading space to string iff non-empty string.
:rspace             - add one trailing space iff non-empty string.
:space              - use this to add spaces to empty string.
:tab                - use this to add tabs to empty string.

:cgvar              - wrap value as an cado template reference - e.g., $foo:nameof:cgvar -> {=foo=}

:quote,:q           - wrap value in single quotes.
:dquote,:dq         - wrap value in double quotes.

:todos              - convert a string to dos text.
:tounix             - convert a string to unix text.

:toupper            - capitalize letters in a string.
:tolower            - uncapitalize letters in a string.

:hexencode          - encode a regular string as a hex string, prefixed by 'HEX_'.
:hexdecode          - decode a HEX_ encoded string to its regular form.

:urlencode          - encode a regular string as a url.
:urldecode          - decode a url to its regular string form.

                    =====================
                    SPECIALIZED OPERATORS
                    =====================
:crc                - return crcfile, and if that fails, crcstr.
:crcfile            - return the crc of the file named by the string.
:crcstr             - return the crc of the contents of a string.
:freq               - get the frequency of each line.
:method2rec         - convert a java method signature to a tab separated record.
:studyclass         - generate CG_CLASS variables, just as if we generated a real class file.
:stripRcsKeywords   - strip all RCS keywords from the string.


                    ==============================================
                    STACK VARIABLES.  See also: STACK MANIPULATION
                    ==============================================
:top                - return top value of stack (last-in).
:bottom             - return bottom value of stack (first-in).
:car                - alias for :bottom for lisp aficionados.
:cdr                - return the stack minus its :car
:split              - create stack variable by splitting text with $CG_SPLIT_PATTERN.
                      Default split pattern is:  /[\t,]/
:stacksize          - return the size of a stack created with %push.
:stackminus         - subtract the members of CG_STACK_SPEC from current stack (as in set subtraction).
:showstack          - display stack as list $CG_STACK_DELIMITER separating elements.
:unique             - eliminate duplicate elements on a stack, preserving order.

                    =============
                    ANT OPERATORS
                    =============
:antvar             - wrap value as an ant variable reference - e.g., $foo:nameof:antvar -> ${foo}.

:parse_antprops     - builds table of ant properties from input ant script or snippet.
:clear_antprops     - clears table built by :parse_antprops.
:expand_antprops    - expand all variable references in internal ant property table.
:showantvars        - display all ant properties as ant <property ...> statements.

# the following operate on the :parse_antprops table:
:expand_antrefs     - expand ant property variable references in input string.
:antpropvalue       - return the value of the named ant property.
:antpropnames       - input: stack of ant property names.  output: stack of corresponding values.
:isantprop          - 1 if value is an ant property, 0 otherwise.

                    ==================
                    SH/CSH REFACTORING
                    ==================
:factorShSubs       - replace sh subroutine declarations with macros, and create macro definitions in
                      CG_SHSUB_DEFS variable, which is cleared with each use.  Store list of macro
                      names for subroutines processed in CG_SHSUB_LIST stack variable.  Macro names are
                      prepended with CG_SHSUB_PREFIX (see below).  Exclude names matching
                      CG_SHSUB_EXCLUDE_PATTERN if defined, and only include names matching
                      CG_SHSUB_INCLUDE_PATTERN, if defined, with excludes overriding includes.

                      References to the subroutine are appended with "_ref", for example:
                          shsub_foo_ref, shsub_foo2_ref
                      for references to subroutines foo(), foo2().

:factorShVars       - replace sh variable names and values with references to macros,
                      and create list of variables processed in CG_SHVAR_LIST stack variable.
                      Exclude names matching CG_SHVAR_EXCLUDE_PATTERN if defined, and include
                      only names matching CG_SHVAR_INCLUDE_PATTERN if defined.

                      Values assigned to variables are named after the variable, for example:
                          shvar_foo_val01, shvar_foo_val02, ... shvar_foo_val<nn>

:factorCshVars      - replace csh variable name references with macros, and create list of
                      variables processed in CG_CSHVAR_LIST stack variable.  Exclude names
                      matching CG_CSHVAR_EXCLUDE_PATTERN if defined, and include only names
                      matching CG_CSHVAR_INCLUDE_PATTERN if defined.

                      Values are named after the variable, as in :factorShVars.

                    -----------------------
                    :factorShSubs modifiers
                    -----------------------
CG_SHSUB_PREFIX     - use this prefix when generating sh subroutine definitions and macro refs.
                      default prefix is "shsub_".
CG_SHSUB_EXCLUDE_PATTERN
                    - exclude the names of sh subroutines matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.
CG_SHSUB_INCLUDE_PATTERN
                    - include the names of sh subroutines matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.

                    --------------------
                    :factorShSubs output
                    --------------------
CG_SHSUB_DEFS       - definitions of factored out sh subroutines.
CG_SHSUB_LIST       - stack of generated variable names for subroutine names factored out.
                      Example:  shsub_foo, shsub_foo2, ...

                    -----------------------
                    :factorShVars modifiers
                    -----------------------
CG_SHVAR_PREFIX     - use this prefix when generating sh variable macro refs.
                      default prefix is "shvar_".
CG_SHVAR_EXCLUDE_PATTERN
                    - exclude the names of sh variables matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.
CG_SHVAR_INCLUDE_PATTERN
                    - include the names of sh variables matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.

                    --------------------
                    :factorShVars output
                    --------------------
CG_SHVAR_DEFS       - factored text created from original, with macros for all variables and values.
CG_SHVAR_LIST       - stack of generated variable names for variables factored out.
                      Example:  shvar_foo, shvar_foo2, ...
CG_SHVARVAL_LIST    - stack of generated variable-value names for variables factored out.
                      Example:  shvar_foo_val01, shvar_foo2_val01, shvar_foo2_val02, etc.

                    ------------------------
                    :factorCshVars modifiers
                    ------------------------
CG_CSHVAR_PREFIX    - use this prefix when generating csh variable macro refs.
                      default prefix is "cshvar_".
CG_CSHVAR_EXCLUDE_PATTERN
                    - exclude the names of csh variables matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.
CG_CSHVAR_INCLUDE_PATTERN
                    - include the names of csh variables matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.

                    ---------------------
                    :factorCshVars output
                    ---------------------
CG_CSHVAR_DEFS      - factored text created from original, with macros for all variables and values.
CG_CSHVAR_LIST      - stack of generated variable names for variables factored out.
CG_CSHVARVAL_LIST   - stack of generated variable-value names for variables factored out.

                    =============
                    FILE TEST OPS
                    =============
:B                  - return non-zero if file is Binary file.
:T                  - return non-zero if file is Text file.
:d                  - return non-zero if file is directory.
:e                  - return non-zero if file is exists.
:f                  - return non-zero if file is plain file.
:l                  - return non-zero if file is symbolic link.
:r                  - return non-zero if file is readable.
:sz                 - return non-zero if file is non-zero size (returns size).
:w                  - return non-zero if file is writable.
:x                  - return non-zero if file is executable.
:z                  - return non-zero if file is zero length.

                    =====================
                    COMPARISON & MATCHING
                    =====================
:eq                 - :eq - will compare against CG_COMPARE_SPEC
:ne                 - :ne - will compare against CG_COMPARE_SPEC
:ge                 - :ge - will compare against CG_COMPARE_SPEC
:gt                 - :gt - will compare against CG_COMPARE_SPEC
:le                 - :le - will compare against CG_COMPARE_SPEC
:lt                 - :lt - will compare against CG_COMPARE_SPEC
:match              - match against CG_MATCH_SPEC. 1 if match, 0 if no match.
:m                  - alias for :match
:rangelb            - :rangelb => m..n => m
:rangeub            - :rangeub => m..n => n

                    ==========
                    FILE INPUT
                    ==========
:openfile           - open a file if it is open. return error string or empty if no error.
:closefile          - close a file if it is open. set $var to error or empty if no error.
:getnextline        - get the next line of a file if it is open.
:currentline        - return the current input line of a file, or undef varname if file is closed
:currentlinenumber  - (1..nlines), 0 => file closed
}

{                   =======
                    PRAGMAS
                    =======
%pragma require <perl_file>   - read a <perl_file> into the current context.
                                Can be used to add custom postfix operators.
%pragma reset_stack_delimiter - restore CG_STACK_DELIMITER to default value.

%pragma echo_expands [1|0]    - if 1, auto-expand macros in %echo template argument list.
%pragma environment  [1|0]    - if 1, allow variables from the environment (same as passing -e).
                                if 0, environment variables references will return the undefined value.
%pragma maxevaldepth <num>    - if <= 0, max recursion depth for %evalmacro * (recursive) is unbounded.
                                if >= 1, max recursion depth for %evalmacro * is set to <num>.
                                (See also:  %evalmacro statement).

%pragma clrifndef [1|0]       - if 1, undefined template macros resolve to empty string instead of ${var:undef}.
                                (See also:  :clrifndef op).
%pragma copy    [1|0]         - if 1, do not expand templates when generating documents.
%pragma update  [1|0]         - set/reset -u (update) option.

%pragma debug   [1|0]         - set/reset -debug option.
%pragma ddebug  [1|0]         - set/reset -ddebug option.
%pragma quiet   [1|0]         - set/reset -q(uiet) option.
%pragma verbose [1|0]         - set/reset -v(erbose) option.

%pragma filegen_notices_to_stdout [1|0]
                              - send file generation (x -> y) messages to stdout instead of stderr.
%pragma preserve_multiline_lnewline [1|0]
                              - if 1, preserve the first newline in a here-now document (normally trimmed).
%pragma trim_multiline_rnewline [1|0]
                              - if 1, trim the final newline in a here-now document (normally added).


                    ================
                    PRAGMA OPERATORS
                    ================
:pv                 - alias for :pragmavalue.
:pragmavalue        - return the value of the named pragma, or empty string if no such pragma.
                      For example:
                          %pragma quiet 1
                          %echo pragma quiet=$quiet:nameof:pragmavalue
                      will display "pragma quiet=1"
                      Note that $quiet:pragmavalue is shorthand for $quiet:nameof:pragmavalue
                      iff $quiet:valueof is undefined or empty.
}

{                   ==================
                    RESERVED VARIABLES
                    ==================

                    =============
                    USER SETTABLE
                    =============
$CG_ARGV
$CG_ROOT            - The root of the output directory.  all files are generated relative to $CG_ROOT
$CG_TEMPLATE_PATH   - List of directories to find templates and %include files.

$CG_EXIT_STATUS     - The shell exit status returned when the program exits.  An explicit %halt
                      statement will override this value.  WARNING:  defining CG_EXIT_STATUS
                      will override internally generated interpreter errors.

$CG_MODE            - Generate files with this mode.  Default is 0664.
$CG_SHELL_CWD       - The current working directory for shell commands.  If the directory exists,
                      all explicit and implied %shell commands will cd to this directory before executing
                      the remainder of the command string.  Commands will be executed in the interpreter's
                      current working directory if CG_SHELL_CWD is undefined.  Same semantics apply to
                      shell postfix operators, e.g., "$somevar:pwd" will show the calculated working dir
                      using the above semantics.
$CG_SHELL_COMMAND_ARGS
                    - Arguments to pass to external commands specified as postfix operators.

$CG_STACK_DELIMITER - Input delimiter character for creating stacks with %push.  Default is "\t".
$CG_SPLIT_PATTERN   - Split pattern for creating stack variables.  default pattern is:  /[\t,]/

$CG_MATCH_SPEC      - Specify pattern for :match operator.
$CG_SUBSTITUTE_SPEC - Specify substitute/replace pattern for :substitute operator.
$CG_SUBSTITUTE_SPEC2- Specify substitute/replace pattern for secondary substitute (:s2) operator.
$CG_COMPARE_SPEC    - Specify second value comparison operators.  See COMPARISON & MATCHING operators.

$CG_INDENT_STRING   - indent string for :indent operator.  default is four spaces.
$CG_NEWLINE_BEFORE_CLASS_BRACE
                    - set this using :newline if you want a newline before java class braces.

                    ======================
                    SET BY THE INTERPRETER
                    ======================

$CG_ARGV            - arguments provided on the command line to the user script
$CG_INFILE          - the file name currently being interpreted.
$CG_LINE_NUMBER     - the line number of the current statement, relative to the current CG_INFILE
$CG_SHELL_STATUS    - exit status of the last %shell command

                    ==============================================
                    GENERATED VARIABLES DURING TEMPLATE PROCESSING
                    ==============================================

CG_TEMPLATE         - the name of the template file (mytemplate.jtpl).
CG_DIRNAME          - the name of the output dir (com/acme/roles/baker).
CG_FILENAME         - the name of the output file (BreadMaker.java).
CG_CLASSNAME        - the name of the current class (BreadMaker).
CG_FULL_CLASSNAME   - the full class name (com.acme.roles.baker.BreadMaker).
CG_PKGNAME          - the relative package name (baker).
CG_FULL_PKGNAME     - the full package name (com.acme.roles.baker).
}

{                   ==========
                    STATEMENTS
                    ==========

                    ====================
                    ASSIGNMENT OPERATORS
                    ====================
lhs  = rhs          - assign rhs to variable on lhs, with expansion of rhs.
lhs := rhs          - assign rhs to variable on lhs, with NO expansion of rhs (raw assignment).
lhs .= rhs          - append rhs to lhs, with expansion of rhs.
lhs .:= rhs         - assign rhs to lhs, with NO expansion of rhs.

lhs += rhs          - lhs = $lhs + $rhs  (addition)
lhs -= rhs          - lhs = $lhs - $rhs  (subtraction)
lhs *= rhs          - lhs = $lhs * $rhs  (multiplication)
lhs /= rhs          - lhs = $lhs / $rhs  (division)
lhs **= rhs         - lhs = $lhs ** $rhs (exponentiation)
lhs %= rhs          - lhs = $lhs % $rhs  (modulo)
lhs |= rhs          - lhs = $lhs | $rhs  (bitwise or)
lhs &= rhs          - lhs = $lhs & $rhs  (bitwise and)
lhs ^= rhs          - lhs = $lhs ^ $rhs  (bitwise complement)
lhs x= rhs          - lhs = $lhs x $rhs  (string replication)

$varexpr = rhs      - expand $varexpr, which must result in a variable name, and then assign the rhs to
                      the named variable.  Also valid for :=, .=, ... (all other assignment operators).

                    ==============================================
                    STACK MANIPULATION.  See also: STACK VARIABLES
                    ==============================================
%push               - push one or more elements on stack.  Usage:  %push mystack [values...]
%upush              - push elements on stack uniquely
%pop                - pop last-in value:  %pop xx mystack
%shift              - shift first-in value:  %shift xx  mystack

                    ==========
                    PROCESSING
                    ==========
%pragma             - %pragma var value.  See PRAGMAS for list of pragmas.

%evalmacro [*] [>>] OUT IN
                    - evaluate the contents of IN into OUT, expanding all template macros.
                      if output var is prefixed by '>>', then we append the variable.
                      If '*' we evaluate IN recursively until its contents are unchanging,
                      or %pragma maxevaldepth is exceeded.  See also:  %pragma maxevaldepth

%readtemplate OUT <infile>
                    - read the literal contents of <infile> into OUT, without any evaluation.
%evaltemplate OUT <infile>
                    - shorthand for:
                          %readtemple OUT <infile>
                          %evalmacro OUT OUT

%include            - process include.
%interpret          - interpret the contents of a variable:  %interpret varname
%call               - alias for %interpret.

%echo  [-n]         - echo text to stdout.  If -n, do not add final newline.
%print [-n]         - alias for %echo.

%eecho  [-n]        - echo text to stderr.  If -n, do not add final newline.
%eprint [-n]        - alias for %eecho.

%void               - useful for evaluating postfix ops without assignment.

%shell              - call to the shell, e.g.  "%shell date".  See also $CG_SHELL_CWD setting.
%<cmd>              - equivalent to "%shell <cmd> ...".  <cmd> cannot be an expression - use %shell for that.

                    ======================
                    VARIABLES, ENVIRONMENT
                    ======================
%pushv              - push variables whose name matches a pattern onto a new or existing stack.
                      E.g., "%pushv myvarstack /perl RE/".  If RE is missing, push ALL variables onto stack.
                      Pattern can also be a single variable reference, e.g., "%pushv vardefs $vpattern"
%undef              - eliminates variables. Usage:  %undef [/pattern /] OR $undef $vpattern
%export             - export a variable to the env.
%unexport           - delete a variable from the env.

                    ============
                    CONDITIONALS
                    ============
%ifdef  <name|ref> <statement>
                    - execute <statement> only if $name or $ref:valueof is defined.
%ifndef <name|ref> <statement>
                    - execute <statement> only if $name or $ref:valueof is NOT defined.

%if    <expr> <statement>
                    - execute <statement> only if <expr> evaluates to non-zero or non-null.
%ifnot <expr> <statement>
                    - execute <statement> only if <expr> evaluates to zero or null (emtpy string).

                    =======
                    LOOPING
                    =======
%whiledef <name|ref> <statement>
                    - execute <statement> only while $name or $ref:valueof is defined.
%while <expr> <statement>
                    - execute <statement> only while <expr> evaluates to non-zero or non-null (not empty string).

%foreach            - %foreach iterator_var {range_var|range_var_ptr} statement
                      example 1:  arange = 01..05
                                  %foreach ii arange %call loop
                      example 2:  ptr = $arange
                                  %foreach ii $ptr %call loop
                      example 3:  vpattern := /^FOO_VAR_.*/
                                  %foreach var vpattern %echo var=$var

                    ===========
                    ERRORS/EXIT
                    ===========
%return [-e] [-s status] [msg]
                    - display optional <msg>, and return immediately to the enclosing script.
                      if the current script is the top-level script, then return to shell.
                      Options:
                        -e      redirects message to stderr
                        -s num  set CG_EXIT_STATUS to <num>

                      See also: $CG_EXIT_STATUS reserved variable

%exit   msg         - DEPRECATED.  alias for %return.

%halt   [status]    - exit program with numeric <status>, or zero if <status> is not provided.
                      See also: $CG_EXIT_STATUS reserved variable
%abort  [status]    - alias for %halt
}

