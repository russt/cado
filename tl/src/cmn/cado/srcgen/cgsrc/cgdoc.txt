
                    =========================
                     Codegen Quick Reference
                    Version {=VERSION=}, {=VERSION_DATE=}
                    =========================

{
                    ==========================
                    ASSIGNMENT, INITIALIZATION
                    ==========================

:assign, :a         - assign current value of variable to the named variable
:nameof             - substitute the name of the variable
:undef              - return undefined value
:valueof            - return the value of a variable
:zero               - set a variable to zero.
:clr                - set a variable to empty string.
:clrifndef          - clear variable if it is undefined (see also:  %pragma clrifndef)
:env                - return value of an environment variable, or empty string if not defined.
                      Example: $HOME = $HOME:nameof:env
                      will set $HOME to the vaule of the environment $HOME.
                      Note that $HOME:undef:env <==> $HOME:nameof:env, i.e., if variable is
                      undefined then its name will be used.

                    =======
                    NUMERIC
                    =======
:decr               - decrement by 1
:incr               - increment by 1
:i                  - alias for :incr
:isint              - returns 1 if <val> is a positive integer, else zero.
:pad                - pad a number or string as specified by sprintf CG_PAD_SPEC

:plus<n>            - add <n> to variable. maintains pad setting.  :plus1 <=> :incr
:minus<n>           - subtract <n> from variable. maintains pad setting.  :minus1 <=> :decr
:times<n>           - multiply variable times <n>
:div<n>             - divide variable by <n> (integer division).
:rem<n>             - modulo <n> of varible, i.e., $foo:rem2 <=> ($foo % 2)

                    =============
                    XML OPERATORS
                    =============
:xmlcomment         - wrap $var in xml comment:
:xmlcommentblock    - wrap $var in multi-line xml comment: #wrap the input string in an xml comment

                    ================
                    STRING OPERATORS
                    ================
:indent<n>          - indent each line (<n> x CG_INDENT_STRING) levels. example $foo:indent2
:basename           - return basename of input var
:dirname            - return dirname of input var
:suffix             - return suffix of input var

:cap                - this op capitalizes the first letter of a string.
:uncap              - uncapitalize the first letter of a string.

:onecol             - split lines on whitespace, resulting in a single column of data.
:oneline            - replace \s*EOL\s* sequences with a single space, and trim result.
                      (mashes multi-line input to one line).

:lnewline           - insert leading (left) newline iff non-empty string.
:rnewline           - append trailing (right) newline iff non-empty string.
:newline            - append trailing newline unconditionally.
:fixeol             - force at most one newline at the end of the string
:eoltrim            - trim whitespace preceeding newlines
:eolsqueeze         - compress multiple empty lines into a single empty line.

:ltrim              - trim leading whitespace (tabs, spaces, and newlines)
:rtrim              - trim trailing whitespace
:trim               - trim lead and trailing whitespace

:substitute         - apply substitute pattern specified by $CG_SUBSTITUTE_SPEC
:s                  - alias for :substitute

:lspace             - add one leading space to string iff non-empty string.
:rspace             - add one trailing space iff non-empty string.
:space              - use this to add spaces to empty string.
:tab                - use this to add tabs to empty string.

:todos              - convert a string to dos text
:tounix             - convert a string to unix text

:toupper            - capitalize letters in a string
:tolower            - uncapitalize letters in a string

                    =====================
                    SPECIALIZED OPERATORS
                    =====================
:crc                - return crcfile, and if that fails, crcstr.
:crcfile            - return the crc of the file named by the string.
:crcstr             - return the crc of the contents of a string
:freq               - get the frequency of each line.
:method2rec         - convert a java method signature to a tab separated record
:studyclass         - generate CG_CLASS variables, just as if we generated a real class file
:stripRcsKeywords   - strip all RCS keywords from the string
:antvar             - convert to an ant variable reference:


                    ==============================================
                    STACK VARIABLES.  See also: STACK MANIPULATION
                    ==============================================
:top                - return top value of stack (last-in)
:bottom             - return bottom value of stack (first-in)
:car                - alias for :bottom for lisp affectionados
:cdr                - return the stack minus it's :car
:split              - create stack variable by splitting text with $CG_SPLIT_PATTERN.
                      Default split pattern is:  /[\t,]/
:stacksize          - return the size of a stack created with %push.
:stackminus         - subtract the members of CG_STACK_SPEC from current stack (as in set subtaction).
:showstack          - display stack as list $CG_STACK_DELIMITER separating elements.

                    ==================
                    SH/CSH REFACTORING
                    ==================
:factorShSubs       - replace sh subroutine declarations with macros, and create macro definitions in
                      CG_SHSUB_DEFS variable, which is cleared with each use.  Store list of
                      subroutines processed in CG_SHSUB_LIST stack variable.  Exclude names
                      matching CG_SHSUB_EXCLUDE_PATTERN if defined, and include only names
                      matching CG_SHSUB_INCLUDE_PATTERN if defined.

:factorShVars       - replace sh variable names and values with references with macros,
                      and create list of variables processed in CG_SHVAR_LIST stack variable.
                      Exclude names matching CG_SHVAR_EXCLUDE_PATTERN if defined, and include
                      only names matching CG_SHVAR_INCLUDE_PATTERN if defined.

                      Values assigned to variables are named after the variable, for example:
                          shvar_foo_val01, shvar_foo_val02, ... shvar_foo_val<nn>

:factorCshVars      - replace csh variable name references with macros, and create list of
                      variables processed in CG_CSHVAR_LIST stack variable.  Exclude names
                      matching CG_CSHVAR_EXCLUDE_PATTERN if defined, and include only names
                      matching CG_CSHVAR_INCLUDE_PATTERN if defined.

                      Values are named after the variable, as in :factorShVars.

                    -----------------------
                    :factorShSubs modifiers
                    -----------------------
CG_SHSUB_PREFIX     - use this prefix when generating sh subroutine defintions and macro refs.
                      default prefix is "shsub_".
CG_SHSUB_EXCLUDE_PATTERN
                    - exclude the names of sh subroutines matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.
CG_SHSUB_INCLUDE_PATTERN
                    - include the names of sh subroutines matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.

                    --------------------
                    :factorShSubs output
                    --------------------
CG_SHSUB_DEFS       - definitions of factored out sh subroutines.
CG_SHSUB_LIST       - stack of generated variable names for subroutine names factored out.
                      Example:  shsub_foo, shsub_foo2, ...

$expand_srdefs, ${CG_SHSUB_PREFIX}EVAL_SR_DEFS
                    - generate code to evaluate any variable name macros contained with the
                      subroutine definitions.   Example:
                          $shtxt = $shtxt:factorShVars:factorShSubs
                          ...
                          %call $expand_varvaldefs
                          %call $expand_srdefs
                      will evaluate any macros contained in the subroutine definitions with the current
                      variable definitions, including any desired variable name changes.  See also
                      the description of $expand_varvaldefs below.

                    -----------------------
                    :factorShVars modifiers
                    -----------------------
CG_SHVAR_PREFIX     - use this prefix when generating sh variable macro refs.
                      default prefix is "shvar_".
CG_SHVAR_EXCLUDE_PATTERN
                    - exclude the names of sh variables matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.
CG_SHVAR_INCLUDE_PATTERN
                    - include the names of sh variables matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.

                    --------------------
                    :factorShVars output
                    --------------------
CG_SHVAR_LIST       - stack of generated variable names for variables factored out.
                      Example:  shvar_foo, shvar_foo2, ...
CG_SHVARVAL_LIST    - stack of generated variable-value names for variables factored out.
                      Example:  shvar_foo_val01, shvar_foo2_val01, shvar_foo2_val02, etc.

$expand_varvaldefs, ${CG_SHVAR_PREFIX}EVAL_VARVAL_DEFS
                    - generate code to evaluate any variable name macros contained with the
                      value definitions.   Example:
                          $shtxt = $shtxt:factorShVars
                          ...
                          %call $expand_varvaldefs
                      will evaluate any macros contained in the value definitions with the current
                      variable definitions, including any desired variable name changes.

                    ------------------------
                    :factorCshVars modifiers
                    ------------------------
CG_CSHVAR_PREFIX    - use this prefix when generating csh variable macro refs.
                      default prefix is "cshvar_".
CG_CSHVAR_EXCLUDE_PATTERN
                    - exclude the names of csh variables matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.
CG_CSHVAR_INCLUDE_PATTERN
                    - include the names of csh variables matching this perl regular expression.
                      Note that exclude patterns take precedence over include patterns.

                    ---------------------
                    :factorCshVars output
                    ---------------------
CG_CSHVAR_LIST      - stack of generated variable names for variables factored out.
CG_CSHVARVAL_LIST   - stack of generated variable-value names for variables factored out.

                    =============
                    FILE TEST OPS
                    =============
:B                  - return non-zero if file is Binary file.
:T                  - return non-zero if file is Text file.
:d                  - return non-zero if file is directory.
:e                  - return non-zero if file is exists.
:f                  - return non-zero if file is plain file.
:l                  - return non-zero if file is symlink.
:r                  - return non-zero if file is readable.
:sz                 - return non-zero if file is non-zero size (returns size).
:w                  - return non-zero if file is writable.
:x                  - return non-zero if file is executable.
:z                  - return non-zero if file is zero length.

                    =====================
                    COMPARISON & MATCHING
                    =====================
:eq                 - :eq - will compare against CG_COMPARE_SPEC
:ne                 - :ne - will compare against CG_COMPARE_SPEC
:ge                 - :ge - will compare against CG_COMPARE_SPEC
:gt                 - :gt - will compare against CG_COMPARE_SPEC
:le                 - :le - will compare against CG_COMPARE_SPEC
:lt                 - :lt - will compare against CG_COMPARE_SPEC
:match              - match against CG_MATCH_SPEC 
:m                  - alias for :match
:rangelb            - :rangelb => m..n => m
:rangeub            - :rangeub => m..n => n

                    ==========
                    FILE INPUT
                    ==========
:openfile           - open a file if it is open. return error string or empty if no error.
:closefile          - close a file if it is open. set $var to error or empty if no error.
:getnextline        - get the next line of a file if it is open.
:currentline        - return the current input line of a file, or undef varname if file is closed
:currentlinenumber  - (1..nlines), 0 => file closed

                    ================
                    PRAGMA OPERATORS
                    ================
:pv                 - alias for :pragmavalue.
:pragmavalue        - return the value of the named pragma, or empty string if no such pragma.
                      For example:
                          %pragma quiet 1
                          %echo pragma quiet=$quiet:nameof:pragmavalue
                      will display "pragma quiet=1"
                      Note that $quiet:pragmavalue is shorthand for $quiet:nameof:pragmavalue
                      iff $quiet:valueof is undefined.

}

{                   =======
                    PRAGMAS
                    =======
%pragma require <perl_file>   - read a <perl_file> into the current context.
%pragma reset_stack_delimiter - restore CG_STACK_DELIMITER to default value. 

%pragma echo_expands [1|0]    - if 1, auto-expand macros in %echo template argument list.
%pragma clrifndef [1|0]       - if 1, undefined template macros resolve to empty string instead of ${var:undef}.
                                (See also:  :clrifndef op).
%pragma copy    [1|0]         - if 1, do not expand templates when generating documents.
%pragma update  [1|0]         - set/reset -u (update) option.

%pragma debug   [1|0]         - set/reset -debug option.
%pragma ddebug  [1|0]         - set/reset -ddebug option.
%pragma quiet   [1|0]         - set/reset -q(uiet) option.
%pragma verbose [1|0]         - set/reset -v(erbose) option.

%pragma filegen_notices_to_stdout [1|0]
                              - send file generation (x -> y) messages to stdout instead of stderr.
%pragma preserve_multiline_lnewline [1|0]
                              - if 1, preserve the first newline in a here-now document (normally trimmed).
%pragma trim_multiline_rnewline [1|0]
                              - if 1, trim the final newline in a here-now document (normally added).

}


{                   ==================
                    RESERVED VARIABLES
                    ==================

                    =============
                    USER SETTABLE
                    =============
$CG_ARGV
$CG_ROOT            - The root of the output directory.  all files are generated relative to $CG_ROOT
$CG_TEMPLATE_PATH   - All includes are processed relative to directories listed in $CG_TEMPLATE_PATH,

$CG_EXIT_STATUS     - The shell exit status returned when the program exits.  An explicit %halt
                      statement will override this value.

$CG_MODE            - Generate files with this mode.  Default is 0664.
$CG_SHELL_CWD       - The current working directory for shell commands.  If the directory exists,
                      all explicit and implied %shell commands will cd to this directory before executing
                      the remainder of the command string.  Commands will be executed in the interpreter's
                      current working directory if CG_SHELL_CWD is undefined.  Same semantics apply to
                      shell postfix operators, e.g., "$somevar:pwd" will show the calculated working dir
                      using the above semantics.
$CG_SHELL_COMMAND_ARGS
                    - Arguments to pass to external commands specified as postfix operators.

$CG_STACK_DELIMITER - Input delimiter character for creating stacks with %push.  Default is "\t".
$CG_SPLIT_PATTERN   - Split pattern for creating stack variables.  default pattern is:  /[\t,]/

$CG_MATCH_SPEC      - Specify pattern for :match operator.
$CG_SUBSTITUTE_SPEC - Specify substitute/replace pattern for :substiture operator.
$CG_COMPARE_SPEC    - Specify second value comparison operators.  See COMPARISON & MATCHING operators.

$CG_INDENT_STRING   - indent string for :indent operator.  default is four spaces.
$CG_NEWLINE_BEFORE_CLASS_BRACE
                    - set this using :newline if you want a newline before java class braces.

                    ======================
                    SET BY THE INTERPRETER
                    ======================

$CG_ARGV            - arguments provided on the command line to the user script
$CG_INFILE          - the file name currently being interpreted.
$CG_LINE_NUMBER     - the line number of the current statement, relative to the current CG_INFILE
$CG_SHELL_STATUS    - exit status of the last %shell command

                    ==============================================
                    GENERATED VARIABLES DURING TEMPLATE PROCESSING
                    ==============================================

CG_TEMPLATE         - the name of the template file (mytemplate.jtpl).
CG_DIRNAME          - the name of the output dir (com/acme/roles/baker).
CG_FILENAME         - the name of the output file (BreadMaker.java).
CG_CLASSNAME        - the name of the current class (BreadMaker).
CG_FULL_CLASSNAME   - the full class name (com.acme.roles.baker.BreadMaker).
CG_PKGNAME          - the relative package name (baker).
CG_FULL_PKGNAME     - the full package name (com.acme.roles.baker).
}

{                   ==========
                    STATEMENTS
                    ==========

                    ====================
                    ASSIGNMENT OPERATORS
                    ====================
lhs  = rhs          - assign rhs to variable on lhs, with expansion of rhs.
lhs := rhs          - assign rhs to variable on lhs, with NO expansion of rhs (raw assignment).
lhs .= rhs          - append rhs to lhs, with expansion of rhs.
lhs .:= rhs         - assign rhs to lhs, with NO expansion of rhs.

lhs += rhs          - lhs = $lhs + $rhs  (addition)
lhs -= rhs          - lhs = $lhs - $rhs  (subtraction)
lhs *= rhs          - lhs = $lhs * $rhs  (multiplication)
lhs /= rhs          - lhs = $lhs / $rhs  (division)
lhs **= rhs         - lhs = $lhs ** $rhs (exponentiation)
lhs %= rhs          - lhs = $lhs % $rhs  (modulo)
lhs |= rhs          - lhs = $lhs | $rhs  (bitwise or)
lhs &= rhs          - lhs = $lhs & $rhs  (bitwise and)
lhs ^= rhs          - lhs = $lhs ^ $rhs  (bitwise complement)
lhs x= rhs          - lhs = $lhs x $rhs  (string replication)

$varexpr = rhs      - expand $varexpr, which must result in a variable name, and then assign the rhs to
                      the named variable.  Also valid for :=, .=, ... (all other assignment operators).

                    ==============================================
                    STACK MANIPULATION.  See also: STACK VARIABLES
                    ==============================================
%push               - push one or more elements on stack.  Usage:  %push mystack [values...]
%upush              - push elements on stack uniquely
%pop                - pop last-in value:  %pop xx mystack
%shift              - shift first-in value:  %shift xx  mystack

                    ==========
                    PROCESSING
                    ==========
%pragma             - %pragma var value.  See PRAGMAS for list of pragmas.

%evalmacro          - if output var is prefixed by '>>', then we append the variable.
%evaltemplate       - %evaltemplate spec
%readtemplate       - %readtemplate spec

%include            - process include.
%interpret          - interpret the contents of a variable:  %interpret varname
%call               - alias for %interpret

%echo               - echo text
%print              - alias for %echo
%void               - useful for evaluating postfix ops without assignment.

%shell              - call to the shell, e.g.  "%shell date".  See also $CG_SHELL_CWD setting.
%<cmd>              - equivalent to "%shell <cmd> ...".  <cmd> cannot be an expression - use %shell for that.

                    ======================
                    VARIABLES, ENVIRONMENT
                    ======================
%pushv              - push variables whose name matches a pattern onto a new or existing stack.
                      E.g., "%pushv myvarstack /perl RE/".  If RE is missing, push ALL variables onto stack.
%undef              - eliminates variables. Usage:  %undef [/pattern /]
%export             - export a variable to the env.
%unexport           - delete a variable from the env.

                    ============
                    CONDITIONALS
                    ============
%ifdef  <name|ref> <statement>
                    - execute <statement> only if $name or $ref:valueof is defined.
%ifndef <name|ref> <statement>
                    - execute <statement> only if $name or $ref:valueof is NOT defined.

%if    <expr> <statement>
                    - execute <statement> only if <expr> evaluates to non-zero or non-null.
%ifnot <expr> <statement>
                    - execute <statement> only if <expr> evaluates to zero or null (emtpy string).

                    =======
                    LOOPING
                    =======
%whiledef <name|ref> <statement>
                    - execute <statement> only while $name or $ref:valueof is defined.
%while <expr> <statement>
                    - execute <statement> only while <expr> evaluates to non-zero or non-null.

%foreach            - %foreach iterator_var {range_var|range_var_ptr} statement
                      example 1:  arange = 01..05
                                  %foreach ii arange %call loop
                      example 2:  ptr = $arange
                                  %foreach ii $ptr %call loop

                    ===========
                    ERRORS/EXIT
                    ===========
%return msg        - display optional <msg> on STDERR, and return immediately to the enclosing script.
                     if the current script is the top-level script, then return to shell.
                     See also $CG_EXIT_STATUS reserved variable.
%exit   msg        - DEPRECATED.  alias for %return.

%halt   [status]   - exit program with numeric <status>, or zero if <status> is not provided.
                     See also $CG_EXIT_STATUS reserved variable.
%abort  [status]   - alias for %halt





