#%pragma preserve_multiline_lnewline 1

#test shell refactoring op:
#    :factorShSubs

sh_txt := << EOF
v_1="v_1 value"
v2="v2 value"
V3="V3 value"

a()
{
    echo sub a: $v_1
}

B_o_B52s (  ){
    echo sub B_o_B52s: $v2
    }

# c() { echo sub c }

c()
{
echo sub c: $V3
}
_123()
{
echo sub _123
a=${v2}
}
a
B_o_B52s
c
_123
EOF

##### show initial sh txt:
{
    %echo BEGIN sh_txt='$sh_txt'
}

undef_shsub_vars := << EOF
#undefine any variables created when we evaluate generate shsub defs:
{
    undefpat = /${CG_SHSUB_PREFIX}.*/
    %undef $undefpat
}
EOF

showsub_factoring :=  << EOF
#display results of a :factorShSubs test
{
    %echo
    %echo {----------------
    OUT=$sh_txt:factorShSubs
    %echo $tname test $tnum:i:a        OUT='$OUT'
    %echo $tname test $tnum  CG_SHSUB_LIST='$CG_SHSUB_LIST:showstack'
    %echo $tname test $tnum  CG_SHSUB_DEFS='$CG_SHSUB_DEFS'
    %echo ----------------}
    %echo
}
EOF

test_generated_shsub := << EOF
#perform macro substitutions on factored sh script, and compare to original
{
    #create a new string using definitions we just created:
    %call CG_SHSUB_DEFS
    %evalmacro CG_COMPARE_SPEC OUT

    #test that new string is same as original:
    result=FAILED
    %if $sh_txt:eq	result=PASSED
    %echo POSTFIX OPERATOR $tname TEST #$tnum:incr:a $result

%ifnot $sh_txt:eq %echo >>>>>>>$CG_COMPARE_SPEC<<<<<<<

    #undefine any variables we just created:
    %call undef_shsub_vars
}
EOF

#test :factorShSubs
{
    tname=:factorShSubs
    tnum = 0

#    %call showsub_factoring
#
#    %echo CG_SHSUB_PREFIX=$CG_SHSUB_PREFIX
#    default_cg_subsh_prefix = $CG_SHSUB_PREFIX
#
#    %call test_generated_shsub
#
#    #test prefix spec:
#    CG_SHSUB_PREFIX = CBSUB_
#    %call showsub_factoring
#    %call test_generated_shsub
#
#    #revert prefix:
#    %undef CG_SHSUB_PREFIX

    #test INCLUDE pattern:
    %undef CG_SHSUB_EXCLUDE_PATTERN
    CG_SHSUB_INCLUDE_PATTERN = /^(a|B.*)$/
    %echo INCLUDE is $CG_SHSUB_INCLUDE_PATTERN
    %call showsub_factoring
    %call test_generated_shsub

%return TESTING
    #test EXCLUDE pattern:
    %undef CG_SHSUB_INCLUDE_PATTERN
    CG_SHSUB_EXCLUDE_PATTERN = /^(a|B.*)$/
    %echo EXCLUDE is $CG_SHSUB_EXCLUDE_PATTERN
    %call showsub_factoring
    %call test_generated_shsub

    #test EXCLUDE and INCLUDE pattern together:
    CG_SHSUB_INCLUDE_PATTERN = /^(a|B.*|c|_\d*)$/
    CG_SHSUB_EXCLUDE_PATTERN = /^(c)$/
    %echo INCLUDE is $CG_SHSUB_INCLUDE_PATTERN, EXCLUDE is $CG_SHSUB_EXCLUDE_PATTERN
    %call showsub_factoring
    %call test_generated_shsub
}
