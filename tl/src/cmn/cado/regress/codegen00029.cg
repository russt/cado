#test shell refactoring op:
#    :factorCshVars

csh_txt_orig := << EOF
# jbiBuild - production build script for jbi product
#IIS_XX is a var containing IIS_XX=$IIS_XX
# IIS_XX is also a var containing IIS_XX=$IIS_XX
set v_1="v_1 value"
set v2 ="v2 value"
#test a var prefixed by another:
set v21 = "v21 value"
set V3= "${v2} is not $v21 but it is the same as $v2"
set foo = "\
foo value,\
$v2,\
${V3:xx}\
"

echo product=$product
echo product count=$#product
echo product isdef=$?product

setenv IIS_XX "a b c"
unsetenv IIS_XX
unset IIS_XX

set foo = (xx yy zz)
echo form1=$?foo
echo form2=${?foo}
echo form3=$#foo
echo form4=${#foo}
echo form5=$foo[2]
echo form6=${foo[2]}

EOF

#operator will automatically eliminate continuation lines, so compare
#against our original txt without continuations:
SQUEEZE_CONTINUED_LINE_SUBST = s/\\\n//sg
CG_SUBSTITUTE_SPEC = $SQUEEZE_CONTINUED_LINE_SUBST
csh_txt = $csh_txt_orig:substitute

##### show initial sh txt:
{
    %echo BEGIN csh_txt='$csh_txt'
}

undef_cshvar_vars := << EOF
#undefine any variables created when we evaluate generate shsub defs:
{
    undefpat = /${CG_CSHVAR_PREFIX}.*/
    %undef $undefpat
}
EOF

showvar_factoring :=  << EOF
#display results of a :factorCshVars test
{
    %echo
    %echo {----------------
    OUT=$csh_txt:factorCshVars
    %echo $tname test $tnum:i:a        OUT='$OUT:lnewline'
    %echo $tname test $tnum  CG_CSHVAR_LIST='$CG_CSHVAR_LIST:showstack'
    %echo $tname test $tnum  CG_CSHVAR_DEFS='$CG_CSHVAR_DEFS'
    %echo ----------------}
    %echo
}
EOF

test_generated_cshvar := << EOF
#perform macro varstitutions on factored sh script, and compare to original
{
    #import definitions we just created:
    %call CG_CSHVAR_DEFS

    #now recursively evaluate factoring of original script:
    %evalr CG_COMPARE_SPEC OUT

    #test that new string is same as original:
    result=FAILED
    %if $csh_txt:eq	result=PASSED
    %echo POSTFIX OPERATOR $tname TEST #$tnum:incr:a $result

%ifnot $csh_txt:eq %echo >>>>>>>$CG_COMPARE_SPEC<<<<<<<

    #undefine any variables we just created:
    %call undef_cshvar_vars
}
EOF

#test :factorCshVars
{
    tname=:factorCshVars
    tnum = 0

    %call showvar_factoring

    %echo CG_CSHVAR_PREFIX=$CG_CSHVAR_PREFIX
    default_cg_varsh_prefix = $CG_CSHVAR_PREFIX

    CG_CSHVAR_PREFIX = CBVAR_
    %call showvar_factoring
    %call test_generated_cshvar

    #revert prefix:
    %undef CG_CSHVAR_PREFIX

    #test INCLUDE pattern:
    %undef CG_CSHVAR_EXCLUDE_PATTERN
    CG_CSHVAR_INCLUDE_PATTERN = /^(v2|V3)$/
    %echo INCLUDE is $CG_CSHVAR_INCLUDE_PATTERN
    %call showvar_factoring
    %call test_generated_cshvar

    #test EXCLUDE pattern:
    %undef CG_CSHVAR_INCLUDE_PATTERN
    CG_CSHVAR_EXCLUDE_PATTERN = /^(v2|V3)$/
    %echo EXCLUDE is $CG_CSHVAR_EXCLUDE_PATTERN
    %call showvar_factoring
    %call test_generated_cshvar

    #test EXCLUDE and INCLUDE pattern together:
    CG_CSHVAR_INCLUDE_PATTERN = /^(v_1|v2|V3)$/
    CG_CSHVAR_EXCLUDE_PATTERN = /^(v_1|V3)$/
    %echo INCLUDE is $CG_CSHVAR_INCLUDE_PATTERN, EXCLUDE is $CG_CSHVAR_EXCLUDE_PATTERN
    %call showvar_factoring
    %call test_generated_cshvar
}
