#
# BEGIN_HEADER - DO NOT EDIT
# 
# The contents of this file are subject to the terms
# of the Common Development and Distribution License
# (the "License").  You may not use this file except
# in compliance with the License.
#
# You can obtain a copy of the license at
# https://open-esb.dev.java.net/public/CDDLv1.0.html.
# See the License for the specific language governing
# permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL
# HEADER in each file and include the License file at
# https://open-esb.dev.java.net/public/CDDLv1.0.html.
# If applicable add the following below this CDDL HEADER,
# with the fields enclosed by brackets "[]" replaced with
# your own identifying information: Portions Copyright
# [year] [name of copyright owner]
#

#
# @(#)testj.cg - ver 1.1 - 01/04/2006
#
# Copyright 2004-2006 Sun Microsystems, Inc. All Rights Reserved.
# 
# END_HEADER - DO NOT EDIT
#

#####
tname=%push/%pop
tnum = 0
%echo
%echo $tname STATEMENT TESTS
#####

#put some spaces at the end:
top = trailing   spaces   

MYSTACK =
%push MYSTACK $top

result=FAILED
%ifnot $MYSTACK:stacksize:minus1	result=PASSED
%echo $tname test $tnum:incr:assign $result
%echo $tname test $tnum MYSTACK:stacksize=$MYSTACK:stacksize
%echo $tname test $tnum MYSTACK='$MYSTACK'

%pop foo MYSTACK

result=FAILED
CG_COMPARE_SPEC = $top
%if $foo:eq	result=PASSED
%echo $tname test $tnum:incr:assign $result
%echo $tname test $tnum MYSTACK:stacksize=$MYSTACK:stacksize
%echo $tname test $tnum foo='$foo'

%push MYSTACK $top
%push MYSTACK middle element
%push MYSTACK last element
result=FAILED
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum:incr:assign $result
%echo $tname test $tnum MYSTACK:stacksize=$MYSTACK:stacksize
%echo $tname test $tnum MYSTACK='$MYSTACK'

loop_macro := << EOF
%echo $tname test $tnum foo='$foo' MYSTACK:stacksize=$MYSTACK:stacksize
%pop foo MYSTACK
EOF

result=FAILED
tnum = $tnum:incr
%pop foo MYSTACK
%whiledef foo %call loop_macro
%ifndef foo	result=PASSED
%echo $tname test $tnum $result

#if missing value, then stack is unmodified:
result=FAILED
tnum = $tnum:incr
%undef MYSTACK
%push MYSTACK
%ifndef MYSTACK	result=PASSED
%echo $tname test $tnum $result (missing rhs)

#if rhs is undefined, we push :undef so error is noticed:
result=FAILED
tnum = $tnum:incr
%undef MYSTACK
%undef rhs
%push MYSTACK $rhs
%echo MYSTACK=$MYSTACK size=$MYSTACK:stacksize
%ifnot $MYSTACK:stacksize:minus1	result=PASSED
%echo $tname test $tnum $result (undef rhs)

#####
tname=%upush
tnum = 0
%echo
%echo $tname STATEMENT TESTS
#####

result=FAILED
tnum = $tnum:incr
%undef MYSTACK
%upush MYSTACK a
%upush MYSTACK a
%upush MYSTACK b
%upush MYSTACK
%echo MYSTACK=$MYSTACK size=$MYSTACK:stacksize
%ifnot $MYSTACK:stacksize:minus2	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
%undef MYSTACK
%upush MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%upush MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%echo MYSTACK=$MYSTACK size=$MYSTACK:stacksize
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
%undef MYSTACK
%upush MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%upush MYSTACK d${CG_STACK_DELIMITER}e${CG_STACK_DELIMITER}f
%echo MYSTACK=$MYSTACK size=$MYSTACK:stacksize
%ifnot $MYSTACK:stacksize:minus6	result=PASSED
%echo $tname test $tnum $result

#####
tname=%push CG_STACK_DELIMITER
tnum = 0
%echo
%echo $tname STATEMENT TESTS
#####

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = |
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER := $
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = ^
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = &
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = -
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = *
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = @
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = ?
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = '
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = "
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = .
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = +
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = \
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

result=FAILED
tnum = $tnum:incr
CG_STACK_DELIMITER = [
%undef MYSTACK
%push MYSTACK a${CG_STACK_DELIMITER}b${CG_STACK_DELIMITER}c
%ifnot $MYSTACK:stacksize:minus3	result=PASSED
%echo $tname test $tnum $result

#####
tname=%pushv
tnum = 0
%echo
%echo $tname STATEMENT TESTS
#####

#create some date-based variables

yy = 00
mm = 00
dd = 00

ii = 00

SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii
SI_$yy:i:a$mm:i:a${dd:i:a}_$ii:i:a = $ii


loop := << EOF
    %echo elem='$elem'
    %shift elem varstack
EOF

%pushv varstack /^SI_.*/
CG_COMPARE_SPEC := SI_010101_01
result=FAILED
%if   $varstack:car:eq	result=PASSED
%echo POSTFIX OPERATOR $tname TEST #$tnum:incr:assign $result

result=FAILED
CG_COMPARE_SPEC := SI_101010_10
%if   $varstack:top:eq	result=PASSED
%echo POSTFIX OPERATOR $tname TEST #$tnum:incr:assign $result

%pragma reset_stack_delimiter

%echo ####### with //'s
%echo $varstack:showstack
%shift elem varstack
%whiledef elem %call loop

%echo ####### without //'s
%pushv varstack ^SI_.*
%echo $varstack:showstack
%shift elem varstack
%whiledef elem %call loop

### test bug that causes perl to exit if RE is not properly formulated:

%echo  PASS BAD REGULAR EXPRESSION TO %pushv:
%pushv foo *
%echo  if we get here program did not exit

