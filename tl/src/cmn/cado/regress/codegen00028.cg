#
#carefully construct cases to test template expansion spacing.
#

set_templates := << EOF
{
    oneline := a() { echo a }
    onelineml := << !
a ()
{
    echo a
}
!

    template1 := << !
{=oneline=}
{=oneline=}
!

    template2 := << !

{=oneline=}

{=oneline=}
!

EOF
}

runtest := << EOF
{
    %evalmacro OUT $T
    %echo
    %echo  T='$T' OUT='$OUT'
}
EOF

runsuite := << EOF
{
    %call set_templates

    %echo #{
    T=template1
    %call runtest

    T=template2
    %call runtest
    %echo #}
EOF
}

%pragma preserve_multiline_lnewline 0
%echo
%echo multiline 0
%call runsuite

%pragma preserve_multiline_lnewline 1
%echo
%echo multiline 1
%call runsuite

#####
#test bug where evalmacro was adding extra newline:
#####

%pragma trim_multiline_rnewline 1

foo_ref := foo

foo := << EOF
foo()
{
    echo sub {=foo_ref=}
}
EOF

%pragma trim_multiline_rnewline 0

%echo BEFORE '$foo'
%evalmacro foo foo
%echo AFTER '$foo'

%echo #####
%echo tests with embedded %s sequences:
%echo #####

FOO1=FOO1_VALUE
FOO2= FOO2_VALUE

foostr := {=FOO1=}=`echo ${=FOO2=} | perl -n -e '$xx=$_; printf "%s.%s-1", substr($xx,0,8), substr($xx,8,6);'`

%echo
%echo BEFORE '$foostr'
%evalmacro foostr foostr
%echo AFTER '$foostr'

foostr := printf("%%{=FOO1=}=%s%d%s=xx{=FOO2=}\n", ${=FOO1=}, 22,${=FOO2=});
%echo BEFORE '$foostr'
%evalmacro foostr foostr
%echo AFTER '$foostr'

#what about just a normal definition?
%echo
foostr := printf("%%$FOO1=%s%d%s=xx$FOO2\n", $FOO1, 22,$FOO2);
%echo BEFORE '$foostr'
foostr = printf("%%$FOO1=%s%d%s=xx$FOO2\n", $FOO1, 22,$FOO2);
%echo AFTER '$foostr'
