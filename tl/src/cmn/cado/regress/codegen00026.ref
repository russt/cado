TESTNAME is codegen00026
BEGIN sh_txt='d()
{
    echo test that first line can be a subroutine dcl.
}
v_1="v_1 value"
v2="v2 value"
V3="V3 value"

a ()
{
#test comments ignored: a:c;_123&B_o_B52s
    echo sub a: $v_1
}

  B_o_B52s (  ){
    echo sub B_o_B52s: $v2
    #test refs within subroutine body:
    echo semicolon:;a;_123
    echo andand:&&a&&_123
    # echo andand:&&a&&_123
    }

# c() { echo sub c }

c()
{
echo sub c: $V3
}
_123()
{
echo sub _123
a=${v2}
}
#a
a
B_o_B52s
c
_123
#test some reference patterns:
    # a;c;_123&B_o_B52s
a;c;_123&B_o_B52s
'

{----------------
:factorShSubs test 1        OUT='{=shsub_d=}
v_1="v_1 value"
v2="v2 value"
V3="V3 value"

{=shsub_a=}

  {=shsub_B_o_B52s=}

# c() { echo sub c }

{=shsub_c=}
{=shsub__123=}
#a
{=shsub_a_ref=}
{=shsub_B_o_B52s_ref=}
{=shsub_c_ref=}
{=shsub__123_ref=}
#test some reference patterns:
    # a;c;_123&B_o_B52s
{=shsub_a_ref=};{=shsub_c_ref=};{=shsub__123_ref=}&{=shsub_B_o_B52s_ref=}
'
:factorShSubs test 1  CG_SHSUB_LIST='d	a	B_o_B52s	c	_123'
:factorShSubs test 1  CG_SHSUB_DEFS='_save_trim_multiline_rnewline = $trim_multiline_rnewline:pragmavalue
%pragma trim_multiline_rnewline 1


##sh subroutine d()
shsub_d_ref := d
shsub_d := << shsub_EOF
{=shsub_d_ref=}()
{
    echo test that first line can be {=shsub_a_ref=} subroutine dcl.
}
shsub_EOF


##sh subroutine a()
shsub_a_ref := a
shsub_a := << shsub_EOF
{=shsub_a_ref=} ()
{
#test comments ignored: a:c;_123&B_o_B52s
    echo sub {=shsub_a_ref=}: $v_1
}
shsub_EOF


##sh subroutine B_o_B52s()
shsub_B_o_B52s_ref := B_o_B52s
shsub_B_o_B52s := << shsub_EOF
{=shsub_B_o_B52s_ref=} (  ){
    echo sub {=shsub_B_o_B52s_ref=}: $v2
    #test refs within subroutine body:
    echo semicolon:;{=shsub_a_ref=};{=shsub__123_ref=}
    echo andand:&&{=shsub_a_ref=}&&{=shsub__123_ref=}
    # echo andand:&&a&&_123
    }
shsub_EOF


##sh subroutine c()
shsub_c_ref := c
shsub_c := << shsub_EOF
{=shsub_c_ref=}()
{
echo sub {=shsub_c_ref=}: $V3
}
shsub_EOF


##sh subroutine _123()
shsub__123_ref := _123
shsub__123 := << shsub_EOF
{=shsub__123_ref=}()
{
echo sub {=shsub__123_ref=}
a=${v2}
}
shsub_EOF


#restore normal behavior for here-now defs:
%pragma trim_multiline_rnewline $_save_trim_multiline_rnewline

'
----------------}

CG_SHSUB_PREFIX=shsub_
POSTFIX OPERATOR :factorShSubs TEST #2 PASSED

{----------------
:factorShSubs test 3        OUT='{=CBSUB_d=}
v_1="v_1 value"
v2="v2 value"
V3="V3 value"

{=CBSUB_a=}

  {=CBSUB_B_o_B52s=}

# c() { echo sub c }

{=CBSUB_c=}
{=CBSUB__123=}
#a
{=CBSUB_a_ref=}
{=CBSUB_B_o_B52s_ref=}
{=CBSUB_c_ref=}
{=CBSUB__123_ref=}
#test some reference patterns:
    # a;c;_123&B_o_B52s
{=CBSUB_a_ref=};{=CBSUB_c_ref=};{=CBSUB__123_ref=}&{=CBSUB_B_o_B52s_ref=}
'
:factorShSubs test 3  CG_SHSUB_LIST='d	a	B_o_B52s	c	_123'
:factorShSubs test 3  CG_SHSUB_DEFS='_save_trim_multiline_rnewline = $trim_multiline_rnewline:pragmavalue
%pragma trim_multiline_rnewline 1


##sh subroutine d()
CBSUB_d_ref := d
CBSUB_d := << CBSUB_EOF
{=CBSUB_d_ref=}()
{
    echo test that first line can be {=CBSUB_a_ref=} subroutine dcl.
}
CBSUB_EOF


##sh subroutine a()
CBSUB_a_ref := a
CBSUB_a := << CBSUB_EOF
{=CBSUB_a_ref=} ()
{
#test comments ignored: a:c;_123&B_o_B52s
    echo sub {=CBSUB_a_ref=}: $v_1
}
CBSUB_EOF


##sh subroutine B_o_B52s()
CBSUB_B_o_B52s_ref := B_o_B52s
CBSUB_B_o_B52s := << CBSUB_EOF
{=CBSUB_B_o_B52s_ref=} (  ){
    echo sub {=CBSUB_B_o_B52s_ref=}: $v2
    #test refs within subroutine body:
    echo semicolon:;{=CBSUB_a_ref=};{=CBSUB__123_ref=}
    echo andand:&&{=CBSUB_a_ref=}&&{=CBSUB__123_ref=}
    # echo andand:&&a&&_123
    }
CBSUB_EOF


##sh subroutine c()
CBSUB_c_ref := c
CBSUB_c := << CBSUB_EOF
{=CBSUB_c_ref=}()
{
echo sub {=CBSUB_c_ref=}: $V3
}
CBSUB_EOF


##sh subroutine _123()
CBSUB__123_ref := _123
CBSUB__123 := << CBSUB_EOF
{=CBSUB__123_ref=}()
{
echo sub {=CBSUB__123_ref=}
a=${v2}
}
CBSUB_EOF


#restore normal behavior for here-now defs:
%pragma trim_multiline_rnewline $_save_trim_multiline_rnewline

'
----------------}

POSTFIX OPERATOR :factorShSubs TEST #4 PASSED
INCLUDE is /^(a|B.*)$/

{----------------
:factorShSubs test 5        OUT='d()
{
    echo test that first line can be {=shsub_a_ref=} subroutine dcl.
}
v_1="v_1 value"
v2="v2 value"
V3="V3 value"

{=shsub_a=}

  {=shsub_B_o_B52s=}

# c() { echo sub c }

c()
{
echo sub c: $V3
}
_123()
{
echo sub _123
a=${v2}
}
#a
{=shsub_a_ref=}
{=shsub_B_o_B52s_ref=}
c
_123
#test some reference patterns:
    # a;c;_123&B_o_B52s
{=shsub_a_ref=};c;_123&{=shsub_B_o_B52s_ref=}
'
:factorShSubs test 5  CG_SHSUB_LIST='a	B_o_B52s'
:factorShSubs test 5  CG_SHSUB_DEFS='_save_trim_multiline_rnewline = $trim_multiline_rnewline:pragmavalue
%pragma trim_multiline_rnewline 1


##sh subroutine a()
shsub_a_ref := a
shsub_a := << shsub_EOF
{=shsub_a_ref=} ()
{
#test comments ignored: a:c;_123&B_o_B52s
    echo sub {=shsub_a_ref=}: $v_1
}
shsub_EOF


##sh subroutine B_o_B52s()
shsub_B_o_B52s_ref := B_o_B52s
shsub_B_o_B52s := << shsub_EOF
{=shsub_B_o_B52s_ref=} (  ){
    echo sub {=shsub_B_o_B52s_ref=}: $v2
    #test refs within subroutine body:
    echo semicolon:;{=shsub_a_ref=};_123
    echo andand:&&{=shsub_a_ref=}&&_123
    # echo andand:&&a&&_123
    }
shsub_EOF


#restore normal behavior for here-now defs:
%pragma trim_multiline_rnewline $_save_trim_multiline_rnewline

'
----------------}

POSTFIX OPERATOR :factorShSubs TEST #6 PASSED
EXCLUDE is /^(a|B.*)$/

{----------------
:factorShSubs test 7        OUT='{=shsub_d=}
v_1="v_1 value"
v2="v2 value"
V3="V3 value"

a ()
{
#test comments ignored: a:c;_123&B_o_B52s
    echo sub a: $v_1
}

  B_o_B52s (  ){
    echo sub B_o_B52s: $v2
    #test refs within subroutine body:
    echo semicolon:;a;{=shsub__123_ref=}
    echo andand:&&a&&{=shsub__123_ref=}
    # echo andand:&&a&&_123
    }

# c() { echo sub c }

{=shsub_c=}
{=shsub__123=}
#a
a
B_o_B52s
{=shsub_c_ref=}
{=shsub__123_ref=}
#test some reference patterns:
    # a;c;_123&B_o_B52s
a;{=shsub_c_ref=};{=shsub__123_ref=}&B_o_B52s
'
:factorShSubs test 7  CG_SHSUB_LIST='d	c	_123'
:factorShSubs test 7  CG_SHSUB_DEFS='_save_trim_multiline_rnewline = $trim_multiline_rnewline:pragmavalue
%pragma trim_multiline_rnewline 1


##sh subroutine d()
shsub_d_ref := d
shsub_d := << shsub_EOF
{=shsub_d_ref=}()
{
    echo test that first line can be a subroutine dcl.
}
shsub_EOF


##sh subroutine c()
shsub_c_ref := c
shsub_c := << shsub_EOF
{=shsub_c_ref=}()
{
echo sub {=shsub_c_ref=}: $V3
}
shsub_EOF


##sh subroutine _123()
shsub__123_ref := _123
shsub__123 := << shsub_EOF
{=shsub__123_ref=}()
{
echo sub {=shsub__123_ref=}
a=${v2}
}
shsub_EOF


#restore normal behavior for here-now defs:
%pragma trim_multiline_rnewline $_save_trim_multiline_rnewline

'
----------------}

POSTFIX OPERATOR :factorShSubs TEST #8 PASSED
INCLUDE is /^(a|B.*|c|_\d*)$/, EXCLUDE is /^(c)$/

{----------------
:factorShSubs test 9        OUT='d()
{
    echo test that first line can be {=shsub_a_ref=} subroutine dcl.
}
v_1="v_1 value"
v2="v2 value"
V3="V3 value"

{=shsub_a=}

  {=shsub_B_o_B52s=}

# c() { echo sub c }

c()
{
echo sub c: $V3
}
{=shsub__123=}
#a
{=shsub_a_ref=}
{=shsub_B_o_B52s_ref=}
c
{=shsub__123_ref=}
#test some reference patterns:
    # a;c;_123&B_o_B52s
{=shsub_a_ref=};c;{=shsub__123_ref=}&{=shsub_B_o_B52s_ref=}
'
:factorShSubs test 9  CG_SHSUB_LIST='a	B_o_B52s	_123'
:factorShSubs test 9  CG_SHSUB_DEFS='_save_trim_multiline_rnewline = $trim_multiline_rnewline:pragmavalue
%pragma trim_multiline_rnewline 1


##sh subroutine a()
shsub_a_ref := a
shsub_a := << shsub_EOF
{=shsub_a_ref=} ()
{
#test comments ignored: a:c;_123&B_o_B52s
    echo sub {=shsub_a_ref=}: $v_1
}
shsub_EOF


##sh subroutine B_o_B52s()
shsub_B_o_B52s_ref := B_o_B52s
shsub_B_o_B52s := << shsub_EOF
{=shsub_B_o_B52s_ref=} (  ){
    echo sub {=shsub_B_o_B52s_ref=}: $v2
    #test refs within subroutine body:
    echo semicolon:;{=shsub_a_ref=};{=shsub__123_ref=}
    echo andand:&&{=shsub_a_ref=}&&{=shsub__123_ref=}
    # echo andand:&&a&&_123
    }
shsub_EOF


##sh subroutine _123()
shsub__123_ref := _123
shsub__123 := << shsub_EOF
{=shsub__123_ref=}()
{
echo sub {=shsub__123_ref=}
a=${v2}
}
shsub_EOF


#restore normal behavior for here-now defs:
%pragma trim_multiline_rnewline $_save_trim_multiline_rnewline

'
----------------}

POSTFIX OPERATOR :factorShSubs TEST #10 PASSED
