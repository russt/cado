{=%include copyright.jtpl=}
package {=CG_FULL_PKGNAME=};

{=%include $CLASS_IMPORTS=}
{=%include $CLASS_JAVADOC=}
public final class {=CG_CLASSNAME=}{=$CLASS_EXTENDS:lspace:eoltrim=}{=$CLASS_IMPLEMENTS:lspace:eoltrim=}{=CG_NEWLINE_BEFORE_CLASS_BRACE=}{
    /**
     * Note that the singleton class is final so that it remains a singleton.
     * Protected constructor is sufficient to suppress unauthorized calls to the constructor
     */
    protected {=CG_CLASSNAME=}() {}

    /**
     * This is the "safe" multi-threaded lazy-init singleton pattern recomended by Bill Pugh.
     * See also:
     *    http://en.wikipedia.org/wiki/Singleton_pattern
     *    http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
     *
     * {=CG_CLASSNAME=}Holder is loaded on the first execution of {=CG_CLASSNAME=}.getInstance()
     * or the first access to {=CG_CLASSNAME=}Holder.instance, not before.
     *
     */
    private static class {=CG_CLASSNAME=}Holder {
        private final static {=CG_CLASSNAME=} INSTANCE = new {=CG_CLASSNAME=}();
    }

    /**
     * Method used for accessing the singleton instance.
     * @return {=CG_CLASSNAME=} instance
     */
    public static {=CG_CLASSNAME=} getInstance()
    {
        return {=CG_CLASSNAME=}Holder.INSTANCE;
    }
{=%include $CLASS_METHODS=}
}
